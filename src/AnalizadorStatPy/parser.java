
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorStatPy;

import java_cup.runtime.*;
import Model.DoublyLinkedList;
import Model.Symbols;
import Model.Symbols_Json;
import Model.V_G;
import Model.GraficaBarras;
import Model.GraficaPie;
import Model.DatosEjex;
import Model.DatosValores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\002\004\000\002\002\003\000\002\054" +
    "\002\000\002\003\011\000\002\055\002\000\002\056\002" +
    "\000\002\004\006\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\057\002\000" +
    "\002\017\010\000\002\017\005\000\002\017\007\000\002" +
    "\017\005\000\002\017\007\000\002\017\005\000\002\060" +
    "\002\000\002\017\010\000\002\017\005\000\002\017\007" +
    "\000\002\017\005\000\002\017\006\000\002\050\003\000" +
    "\002\050\003\000\002\052\002\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\061\002\000\002\042\012" +
    "\000\002\044\004\000\002\044\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\062\002\000\002\063\002\000\002\020" +
    "\013\000\002\064\002\000\002\020\007\000\002\065\002" +
    "\000\002\066\002\000\002\020\014\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\045\004\000\002\045\003\000\002\067" +
    "\002\000\002\021\012\000\002\047\016\000\002\047\016" +
    "\000\002\047\017\000\002\047\017\000\002\070\002\000" +
    "\002\071\002\000\002\022\013\000\002\072\002\000\002" +
    "\073\002\000\002\074\002\000\002\075\002\000\002\034" +
    "\016\000\002\036\005\000\002\076\002\000\002\037\012" +
    "\000\002\040\004\000\002\040\003\000\002\077\002\000" +
    "\002\041\007\000\002\100\002\000\002\041\007\000\002" +
    "\101\002\000\002\041\007\000\002\102\002\000\002\041" +
    "\006\000\002\007\004\000\002\007\003\000\002\010\007" +
    "\000\002\010\016\000\002\010\007\000\002\010\016\000" +
    "\002\023\011\000\002\011\004\000\002\011\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\012\000\002\016" +
    "\003\000\002\013\004\000\002\013\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\012\000\002\015\003\000" +
    "\002\014\004\000\002\014\003\000\002\012\007\000\002" +
    "\012\007\000\002\012\015\000\002\012\013\000\002\012" +
    "\013\000\002\012\012\000\002\012\012\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\015\000\002\012\015\000\002\024\011\000\002" +
    "\025\011\000\002\026\004\000\002\026\003\000\002\027" +
    "\007\000\002\027\007\000\002\027\016\000\002\027\013" +
    "\000\002\027\013\000\002\027\012\000\002\027\012\000" +
    "\002\031\003\000\002\031\003\000\002\031\012\000\002" +
    "\031\003\000\002\030\004\000\002\030\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\012\000\002\032\003" +
    "\000\002\033\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\004\031\006\001\002\000\004\002\u01e6\001" +
    "\002\000\004\002\000\001\002\000\004\032\007\001\002" +
    "\000\004\004\010\001\002\000\004\005\011\001\002\000" +
    "\004\010\012\001\002\000\040\011\uffff\031\uffff\037\uffff" +
    "\040\uffff\041\uffff\044\uffff\046\uffff\050\uffff\051\uffff\063" +
    "\uffff\064\uffff\066\uffff\067\uffff\070\uffff\076\uffff\001\002" +
    "\000\040\011\015\031\ufffd\037\ufffd\040\ufffd\041\ufffd\044" +
    "\ufffd\046\ufffd\050\ufffd\051\ufffd\063\ufffd\064\ufffd\066\ufffd" +
    "\067\ufffd\070\ufffd\076\ufffd\001\002\000\036\031\045\037" +
    "\030\040\020\041\025\044\046\046\027\050\043\051\026" +
    "\063\032\064\021\066\024\067\040\070\051\076\036\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufffe\001\002" +
    "\000\044\011\uffef\031\uffef\037\uffef\040\uffef\041\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\050\uffef\051\uffef\063\uffef" +
    "\064\uffef\066\uffef\067\uffef\070\uffef\076\uffef\001\002\000" +
    "\006\010\u01d9\037\u01da\001\002\000\004\076\u01d3\001\002" +
    "\000\040\011\ufffc\031\045\037\030\040\020\041\025\044" +
    "\046\046\027\050\043\051\026\063\032\064\021\066\024" +
    "\067\040\070\051\076\036\001\002\000\046\011\ufff7\031" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\u01cf\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\050\ufff7\051\ufff7\063\ufff7\064\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\076\ufff7\001\002\000\004\076\u01ca" +
    "\001\002\000\004\004\u01c2\001\002\000\004\004\u01a8\001" +
    "\002\000\004\021\u018d\001\002\000\004\004\u0185\001\002" +
    "\000\044\011\uffee\031\uffee\037\uffee\040\uffee\041\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\063\uffee" +
    "\064\uffee\066\uffee\067\uffee\070\uffee\076\uffee\001\002\000" +
    "\004\076\u0180\001\002\000\044\011\ufff8\031\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\050" +
    "\ufff8\051\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\076\ufff8\001\002\000\044\011\ufff6\031\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\050\ufff6" +
    "\051\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6\070\ufff6\076" +
    "\ufff6\001\002\000\044\011\ufff4\031\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051" +
    "\ufff4\063\ufff4\064\ufff4\066\ufff4\067\ufff4\070\ufff4\076\ufff4" +
    "\001\002\000\004\022\u017d\001\002\000\044\011\ufff3\031" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\050\ufff3\051\ufff3\063\ufff3\064\ufff3\066\ufff3\067" +
    "\ufff3\070\ufff3\076\ufff3\001\002\000\004\076\u0177\001\002" +
    "\000\044\011\ufff2\031\ufff2\037\ufff2\040\ufff2\041\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\063\ufff2" +
    "\064\ufff2\066\ufff2\067\ufff2\070\ufff2\076\ufff2\001\002\000" +
    "\044\011\ufff1\031\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\063\ufff1\064" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\076\ufff1\001\002\000\004" +
    "\004\u0152\001\002\000\036\031\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\044\uff8e\046\uff8e\050\uff8e\051\uff8e\063\uff8e\064\uff8e" +
    "\066\uff8e\067\uff8e\070\uff8e\076\uff8e\001\002\000\010\052" +
    "\121\053\123\054\122\001\002\000\004\017\120\001\002" +
    "\000\044\011\ufff0\031\ufff0\037\ufff0\040\ufff0\041\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\063\ufff0" +
    "\064\ufff0\066\ufff0\067\ufff0\070\ufff0\076\ufff0\001\002\000" +
    "\044\011\ufff5\031\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\063\ufff5\064" +
    "\ufff5\066\ufff5\067\ufff5\070\ufff5\076\ufff5\001\002\000\004" +
    "\076\052\001\002\000\006\017\054\022\053\001\002\000" +
    "\014\012\057\073\062\074\060\075\061\076\055\001\002" +
    "\000\046\011\uffe1\031\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1" +
    "\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070\uffe1\076\uffe1\001" +
    "\002\000\014\013\110\014\111\015\113\016\112\017\uffcd" +
    "\001\002\000\004\017\107\001\002\000\006\013\105\017" +
    "\uffca\001\002\000\014\013\075\014\076\015\100\016\077" +
    "\017\uffcc\001\002\000\006\013\073\017\uffcb\001\002\000" +
    "\014\013\063\014\064\015\066\016\065\017\uffce\001\002" +
    "\000\014\012\057\073\062\074\060\075\061\076\055\001" +
    "\002\000\014\012\057\073\062\074\060\075\061\076\055" +
    "\001\002\000\014\012\057\073\062\074\060\075\061\076" +
    "\055\001\002\000\014\012\057\073\062\074\060\075\061" +
    "\076\055\001\002\000\004\017\uffd8\001\002\000\004\017" +
    "\uffd7\001\002\000\004\017\uffd9\001\002\000\004\017\uffdc" +
    "\001\002\000\014\012\057\073\062\074\060\075\061\076" +
    "\055\001\002\000\004\017\uffdb\001\002\000\014\012\057" +
    "\073\062\074\060\075\061\076\055\001\002\000\014\012" +
    "\057\073\062\074\060\075\061\076\055\001\002\000\014" +
    "\012\057\073\062\074\060\075\061\076\055\001\002\000" +
    "\014\012\057\073\062\074\060\075\061\076\055\001\002" +
    "\000\004\017\uffd0\001\002\000\004\017\uffcf\001\002\000" +
    "\004\017\uffd1\001\002\000\004\017\uffd2\001\002\000\014" +
    "\012\057\073\062\074\060\075\061\076\055\001\002\000" +
    "\004\017\uffda\001\002\000\046\011\uffe2\031\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\063\uffe2\064\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\076\uffe2\001\002\000\014\012\057\073\062\074" +
    "\060\075\061\076\055\001\002\000\014\012\057\073\062" +
    "\074\060\075\061\076\055\001\002\000\014\012\057\073" +
    "\062\074\060\075\061\076\055\001\002\000\014\012\057" +
    "\073\062\074\060\075\061\076\055\001\002\000\004\017" +
    "\uffd4\001\002\000\004\017\uffd3\001\002\000\004\017\uffd5" +
    "\001\002\000\004\017\uffd6\001\002\000\044\011\uffed\031" +
    "\uffed\037\uffed\040\uffed\041\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\050\uffed\051\uffed\063\uffed\064\uffed\066\uffed\067" +
    "\uffed\070\uffed\076\uffed\001\002\000\004\004\u010f\001\002" +
    "\000\004\004\277\001\002\000\004\004\124\001\002\000" +
    "\004\005\125\001\002\000\004\010\126\001\002\000\006" +
    "\063\130\070\131\001\002\000\010\011\uff74\063\uff74\070" +
    "\uff74\001\002\000\014\006\174\033\171\056\172\061\175" +
    "\062\173\001\002\000\006\006\136\033\135\001\002\000" +
    "\010\011\134\063\130\070\131\001\002\000\010\011\uff75" +
    "\063\uff75\070\uff75\001\002\000\044\011\uff5a\031\uff5a\037" +
    "\uff5a\040\uff5a\041\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\050\uff5a\051\uff5a\063\uff5a\064\uff5a\066\uff5a\067\uff5a\070" +
    "\uff5a\076\uff5a\001\002\000\004\060\163\001\002\000\004" +
    "\007\137\001\002\000\004\060\140\001\002\000\004\022" +
    "\141\001\002\000\004\010\142\001\002\000\012\023\147" +
    "\024\145\074\150\076\143\001\002\000\014\011\uff6c\023" +
    "\uff6c\024\uff6c\074\uff6c\076\uff6c\001\002\000\014\011\uff68" +
    "\023\uff68\024\uff68\074\uff68\076\uff68\001\002\000\014\011" +
    "\uff6a\023\uff6a\024\uff6a\074\uff6a\076\uff6a\001\002\000\014" +
    "\011\161\023\147\024\145\074\150\076\143\001\002\000" +
    "\004\010\151\001\002\000\014\011\uff6d\023\uff6d\024\uff6d" +
    "\074\uff6d\076\uff6d\001\002\000\004\055\152\001\002\000" +
    "\004\024\153\001\002\000\004\075\154\001\002\000\004" +
    "\024\155\001\002\000\004\075\156\001\002\000\004\011" +
    "\157\001\002\000\014\011\uff6b\023\uff6b\024\uff6b\074\uff6b" +
    "\076\uff6b\001\002\000\014\011\uff69\023\uff69\024\uff69\074" +
    "\uff69\076\uff69\001\002\000\004\017\162\001\002\000\010" +
    "\011\uff63\063\uff63\070\uff63\001\002\000\004\022\164\001" +
    "\002\000\004\010\165\001\002\000\012\023\147\024\145" +
    "\074\150\076\143\001\002\000\014\011\167\023\147\024" +
    "\145\074\150\076\143\001\002\000\004\017\170\001\002" +
    "\000\010\011\uff61\063\uff61\070\uff61\001\002\000\004\057" +
    "\271\001\002\000\004\022\254\001\002\000\004\022\237" +
    "\001\002\000\004\007\213\001\002\000\004\022\176\001" +
    "\002\000\010\023\200\075\201\076\177\001\002\000\004" +
    "\017\212\001\002\000\004\010\203\001\002\000\004\017" +
    "\202\001\002\000\010\011\uff5e\063\uff5e\070\uff5e\001\002" +
    "\000\004\055\204\001\002\000\004\024\205\001\002\000" +
    "\004\075\206\001\002\000\004\024\207\001\002\000\004" +
    "\075\210\001\002\000\004\011\211\001\002\000\010\011" +
    "\uff5c\063\uff5c\070\uff5c\001\002\000\010\011\uff60\063\uff60" +
    "\070\uff60\001\002\000\004\057\214\001\002\000\004\022" +
    "\215\001\002\000\004\010\216\001\002\000\012\023\223" +
    "\024\220\075\224\076\217\001\002\000\014\011\uff73\023" +
    "\uff73\024\uff73\075\uff73\076\uff73\001\002\000\014\011\uff70" +
    "\023\uff70\024\uff70\075\uff70\076\uff70\001\002\000\014\011" +
    "\uff6e\023\uff6e\024\uff6e\075\uff6e\076\uff6e\001\002\000\014" +
    "\011\235\023\223\024\220\075\224\076\217\001\002\000" +
    "\004\010\225\001\002\000\014\011\uff72\023\uff72\024\uff72" +
    "\075\uff72\076\uff72\001\002\000\004\055\226\001\002\000" +
    "\004\024\227\001\002\000\004\075\230\001\002\000\004" +
    "\024\231\001\002\000\004\075\232\001\002\000\004\011" +
    "\233\001\002\000\014\011\uff71\023\uff71\024\uff71\075\uff71" +
    "\076\uff71\001\002\000\014\011\uff6f\023\uff6f\024\uff6f\075" +
    "\uff6f\076\uff6f\001\002\000\004\017\236\001\002\000\010" +
    "\011\uff64\063\uff64\070\uff64\001\002\000\010\023\241\075" +
    "\242\076\240\001\002\000\004\017\253\001\002\000\004" +
    "\010\244\001\002\000\004\017\243\001\002\000\010\011" +
    "\uff5d\063\uff5d\070\uff5d\001\002\000\004\055\245\001\002" +
    "\000\004\024\246\001\002\000\004\075\247\001\002\000" +
    "\004\024\250\001\002\000\004\075\251\001\002\000\004" +
    "\011\252\001\002\000\010\011\uff5b\063\uff5b\070\uff5b\001" +
    "\002\000\010\011\uff5f\063\uff5f\070\uff5f\001\002\000\010" +
    "\023\256\075\257\076\255\001\002\000\004\017\270\001" +
    "\002\000\004\010\261\001\002\000\004\017\260\001\002" +
    "\000\010\011\uff66\063\uff66\070\uff66\001\002\000\004\055" +
    "\262\001\002\000\004\024\263\001\002\000\004\075\264" +
    "\001\002\000\004\024\265\001\002\000\004\075\266\001" +
    "\002\000\004\011\267\001\002\000\010\011\uff65\063\uff65" +
    "\070\uff65\001\002\000\010\011\uff67\063\uff67\070\uff67\001" +
    "\002\000\004\022\272\001\002\000\004\010\273\001\002" +
    "\000\012\023\223\024\220\075\224\076\217\001\002\000" +
    "\014\011\275\023\223\024\220\075\224\076\217\001\002" +
    "\000\004\017\276\001\002\000\010\011\uff62\063\uff62\070" +
    "\uff62\001\002\000\004\005\300\001\002\000\004\010\301" +
    "\001\002\000\006\063\303\070\304\001\002\000\010\011" +
    "\uff57\063\uff57\070\uff57\001\002\000\010\006\346\033\344" +
    "\056\345\001\002\000\006\006\311\033\310\001\002\000" +
    "\010\011\307\063\303\070\304\001\002\000\010\011\uff58" +
    "\063\uff58\070\uff58\001\002\000\044\011\uff59\031\uff59\037" +
    "\uff59\040\uff59\041\uff59\043\uff59\044\uff59\045\uff59\046\uff59" +
    "\050\uff59\051\uff59\063\uff59\064\uff59\066\uff59\067\uff59\070" +
    "\uff59\076\uff59\001\002\000\004\060\336\001\002\000\004" +
    "\007\312\001\002\000\004\060\313\001\002\000\004\022" +
    "\314\001\002\000\004\010\315\001\002\000\012\023\322" +
    "\024\316\074\323\076\317\001\002\000\014\011\uff46\023" +
    "\uff46\024\uff46\074\uff46\076\uff46\001\002\000\014\011\uff48" +
    "\023\uff48\024\uff48\074\uff48\076\uff48\001\002\000\014\011" +
    "\334\023\322\024\316\074\323\076\317\001\002\000\014" +
    "\011\uff44\023\uff44\024\uff44\074\uff44\076\uff44\001\002\000" +
    "\004\010\324\001\002\000\014\011\uff49\023\uff49\024\uff49" +
    "\074\uff49\076\uff49\001\002\000\004\055\325\001\002\000" +
    "\004\024\326\001\002\000\004\075\327\001\002\000\004" +
    "\024\330\001\002\000\004\075\331\001\002\000\004\011" +
    "\332\001\002\000\014\011\uff47\023\uff47\024\uff47\074\uff47" +
    "\076\uff47\001\002\000\014\011\uff45\023\uff45\024\uff45\074" +
    "\uff45\076\uff45\001\002\000\004\017\335\001\002\000\010" +
    "\011\uff52\063\uff52\070\uff52\001\002\000\004\022\337\001" +
    "\002\000\004\010\340\001\002\000\012\023\322\024\316" +
    "\074\323\076\317\001\002\000\014\011\342\023\322\024" +
    "\316\074\323\076\317\001\002\000\004\017\343\001\002" +
    "\000\010\011\uff50\063\uff50\070\uff50\001\002\000\004\057" +
    "\u0109\001\002\000\004\022\373\001\002\000\004\007\347" +
    "\001\002\000\004\057\350\001\002\000\004\022\351\001" +
    "\002\000\004\010\352\001\002\000\012\023\357\024\354" +
    "\075\360\076\353\001\002\000\014\011\uff4f\023\uff4f\024" +
    "\uff4f\075\uff4f\076\uff4f\001\002\000\014\011\uff4c\023\uff4c" +
    "\024\uff4c\075\uff4c\076\uff4c\001\002\000\014\011\uff4a\023" +
    "\uff4a\024\uff4a\075\uff4a\076\uff4a\001\002\000\014\011\371" +
    "\023\357\024\354\075\360\076\353\001\002\000\004\010" +
    "\361\001\002\000\014\011\uff4e\023\uff4e\024\uff4e\075\uff4e" +
    "\076\uff4e\001\002\000\004\055\362\001\002\000\004\024" +
    "\363\001\002\000\004\075\364\001\002\000\004\024\365" +
    "\001\002\000\004\075\366\001\002\000\004\011\367\001" +
    "\002\000\014\011\uff4d\023\uff4d\024\uff4d\075\uff4d\076\uff4d" +
    "\001\002\000\014\011\uff4b\023\uff4b\024\uff4b\075\uff4b\076" +
    "\uff4b\001\002\000\004\017\372\001\002\000\010\011\uff53" +
    "\063\uff53\070\uff53\001\002\000\010\023\375\075\376\076" +
    "\374\001\002\000\004\017\u0108\001\002\000\004\010\u0100" +
    "\001\002\000\004\017\377\001\002\000\010\011\uff55\063" +
    "\uff55\070\uff55\001\002\000\004\055\u0101\001\002\000\004" +
    "\024\u0102\001\002\000\004\075\u0103\001\002\000\004\024" +
    "\u0104\001\002\000\004\075\u0105\001\002\000\004\011\u0106" +
    "\001\002\000\004\017\u0107\001\002\000\010\011\uff54\063" +
    "\uff54\070\uff54\001\002\000\010\011\uff56\063\uff56\070\uff56" +
    "\001\002\000\004\022\u010a\001\002\000\004\010\u010b\001" +
    "\002\000\012\023\357\024\354\075\360\076\353\001\002" +
    "\000\014\011\u010d\023\357\024\354\075\360\076\353\001" +
    "\002\000\004\017\u010e\001\002\000\010\011\uff51\063\uff51" +
    "\070\uff51\001\002\000\004\005\u0110\001\002\000\004\010" +
    "\u0111\001\002\000\006\063\u0113\070\u0114\001\002\000\010" +
    "\011\uff7b\063\uff7b\070\uff7b\001\002\000\004\076\u0125\001" +
    "\002\000\004\076\u0118\001\002\000\010\011\u0117\063\u0113" +
    "\070\u0114\001\002\000\010\011\uff7c\063\uff7c\070\uff7c\001" +
    "\002\000\044\011\uff76\031\uff76\037\uff76\040\uff76\041\uff76" +
    "\043\uff76\044\uff76\045\uff76\046\uff76\050\uff76\051\uff76\063" +
    "\uff76\064\uff76\066\uff76\067\uff76\070\uff76\076\uff76\001\002" +
    "\000\004\022\u0119\001\002\000\006\023\u011b\074\u011a\001" +
    "\002\000\004\017\u0124\001\002\000\004\010\u011c\001\002" +
    "\000\004\055\u011d\001\002\000\004\024\u011e\001\002\000" +
    "\004\075\u011f\001\002\000\004\024\u0120\001\002\000\004" +
    "\075\u0121\001\002\000\004\011\u0122\001\002\000\004\017" +
    "\u0123\001\002\000\010\011\uff77\063\uff77\070\uff77\001\002" +
    "\000\010\011\uff78\063\uff78\070\uff78\001\002\000\004\022" +
    "\u0126\001\002\000\006\023\u0127\075\u0128\001\002\000\004" +
    "\010\u012a\001\002\000\004\017\u0129\001\002\000\010\011" +
    "\uff7a\063\uff7a\070\uff7a\001\002\000\004\055\u012b\001\002" +
    "\000\004\024\u012c\001\002\000\004\075\u012d\001\002\000" +
    "\004\024\u012e\001\002\000\004\075\u012f\001\002\000\004" +
    "\011\u0130\001\002\000\004\017\u0131\001\002\000\010\011" +
    "\uff79\063\uff79\070\uff79\001\002\000\036\031\045\037\030" +
    "\040\020\041\025\044\046\046\027\050\043\051\026\063" +
    "\032\064\021\066\024\067\040\070\051\076\036\001\002" +
    "\000\040\011\uff8d\031\045\037\030\040\020\041\025\044" +
    "\046\046\027\050\043\051\026\063\032\064\021\066\024" +
    "\067\040\070\051\076\036\001\002\000\004\011\u0136\001" +
    "\002\000\044\011\ufff9\031\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\063" +
    "\ufff9\064\ufff9\066\ufff9\067\ufff9\070\ufff9\076\ufff9\001\002" +
    "\000\004\041\u0137\001\002\000\004\004\u0138\001\002\000" +
    "\046\013\uff8c\014\uff8c\015\uff8c\016\uff8c\022\uff8c\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\034\uff8c\035\uff8c\036\uff8c\066" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\075\uff8c\076\uff8c\001\002" +
    "\000\046\013\u014d\014\u013c\015\u0144\016\u0147\022\u013f\025" +
    "\u013d\026\u0146\027\u0145\030\u014a\034\u013e\035\u013b\036\u0141" +
    "\066\u0140\071\u0143\072\u0149\073\u014b\075\u0142\076\u0148\001" +
    "\002\000\050\005\uff8b\013\u014d\014\u013c\015\u0144\016\u0147" +
    "\022\u013f\025\u013d\026\u0146\027\u0145\030\u014a\034\u013e\035" +
    "\u013b\036\u0141\066\u0140\071\u0143\072\u0149\073\u014b\075\u0142" +
    "\076\u0148\001\002\000\052\005\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\022\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\034\uff9c\035\uff9c\036\uff9c\066\uff9c\071\uff9c\072" +
    "\uff9c\073\uff9c\075\uff9c\076\uff9c\001\002\000\052\005\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\022\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\066\uffa2\071\uffa2\072\uffa2\073\uffa2\075\uffa2\076\uffa2\001" +
    "\002\000\052\005\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\022\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\066\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\075\uffa1\076\uffa1\001\002\000\052\005\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\022\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\034\uff9b\035\uff9b\036\uff9b\066\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\075\uff9b\076\uff9b\001\002\000\052" +
    "\005\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\022" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\066\uff9d\071\uff9d\072\uff9d\073\uff9d\075\uff9d\076" +
    "\uff9d\001\002\000\052\005\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\022\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\066\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\075\uffa9\076\uffa9\001\002\000\052\005\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\022\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\034\uff9a\035\uff9a\036\uff9a\066" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\075\uff9a\076\uff9a\001\002" +
    "\000\052\005\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\022\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\066\uffaa\071\uffaa\072\uffaa\073\uffaa\075" +
    "\uffaa\076\uffaa\001\002\000\052\005\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\022\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\034\uffa7\035\uffa7\036\uffa7\066\uffa7\071\uffa7" +
    "\072\uffa7\073\uffa7\075\uffa7\076\uffa7\001\002\000\052\005" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\022\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\066\uffa4\071\uffa4\072\uffa4\073\uffa4\075\uffa4\076\uffa4" +
    "\001\002\000\052\005\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\022\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\066\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\075\uff9f\076\uff9f\001\002\000\052\005\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\022\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\034\uffa0\035\uffa0\036\uffa0\066\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\075\uffa0\076\uffa0\001\002\000" +
    "\052\005\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\022\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\066\uffa3\071\uffa3\072\uffa3\073\uffa3\075\uffa3" +
    "\076\uffa3\001\002\000\052\005\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\022\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\034\uffab\035\uffab\036\uffab\066\uffab\071\uffab\072" +
    "\uffab\073\uffab\075\uffab\076\uffab\001\002\000\052\005\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\022\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\066\uffa6\071\uffa6\072\uffa6\073\uffa6\075\uffa6\076\uffa6\001" +
    "\002\000\052\005\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\022\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\066\uff9e\071\uff9e\072\uff9e\073\uff9e" +
    "\075\uff9e\076\uff9e\001\002\000\052\005\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\022\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\034\uffa8\035\uffa8\036\uffa8\066\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\075\uffa8\076\uffa8\001\002\000\052" +
    "\005\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\022" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\034\uff98\035\uff98" +
    "\036\uff98\066\uff98\071\uff98\072\uff98\073\uff98\075\uff98\076" +
    "\uff98\001\002\000\052\005\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\022\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\066\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\075\uffa5\076\uffa5\001\002\000\004\005\u0150\001" +
    "\002\000\052\005\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\022\uff99\025\uff99\026\uff99\027\uff99\030\uff99\034" +
    "\uff99\035\uff99\036\uff99\066\uff99\071\uff99\072\uff99\073\uff99" +
    "\075\uff99\076\uff99\001\002\000\004\017\u0151\001\002\000" +
    "\044\011\uff8a\031\uff8a\037\uff8a\040\uff8a\041\uff8a\043\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\050\uff8a\051\uff8a\063\uff8a\064" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\076\uff8a\001\002\000\004" +
    "\064\u0154\001\002\000\004\005\u0172\001\002\000\004\076" +
    "\u0155\001\002\000\004\022\u0156\001\002\000\004\073\u0157" +
    "\001\002\000\004\017\u0158\001\002\000\004\076\u0159\001" +
    "\002\000\006\025\u015a\026\u015b\001\002\000\006\022\u0167" +
    "\073\u0168\001\002\000\006\022\u015c\073\u015d\001\002\000" +
    "\004\073\u0162\001\002\000\004\017\u015e\001\002\000\004" +
    "\076\u015f\001\002\000\004\013\u0160\001\002\000\004\013" +
    "\u0161\001\002\000\004\005\uff94\001\002\000\004\017\u0163" +
    "\001\002\000\004\076\u0164\001\002\000\004\013\u0165\001" +
    "\002\000\004\013\u0166\001\002\000\004\005\uff92\001\002" +
    "\000\004\073\u016d\001\002\000\004\017\u0169\001\002\000" +
    "\004\076\u016a\001\002\000\004\013\u016b\001\002\000\004" +
    "\013\u016c\001\002\000\004\005\uff95\001\002\000\004\017" +
    "\u016e\001\002\000\004\076\u016f\001\002\000\004\013\u0170" +
    "\001\002\000\004\013\u0171\001\002\000\004\005\uff93\001" +
    "\002\000\004\010\u0173\001\002\000\036\031\uff97\037\uff97" +
    "\040\uff97\041\uff97\044\uff97\046\uff97\050\uff97\051\uff97\063" +
    "\uff97\064\uff97\066\uff97\067\uff97\070\uff97\076\uff97\001\002" +
    "\000\036\031\045\037\030\040\020\041\025\044\046\046" +
    "\027\050\043\051\026\063\032\064\021\066\024\067\040" +
    "\070\051\076\036\001\002\000\040\011\u0176\031\045\037" +
    "\030\040\020\041\025\044\046\046\027\050\043\051\026" +
    "\063\032\064\021\066\024\067\040\070\051\076\036\001" +
    "\002\000\044\011\uff96\031\uff96\037\uff96\040\uff96\041\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96\063" +
    "\uff96\064\uff96\066\uff96\067\uff96\070\uff96\076\uff96\001\002" +
    "\000\006\017\u0179\022\u0178\001\002\000\046\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\034\uffe5\035\uffe5\036\uffe5\066\uffe5\071\uffe5\072" +
    "\uffe5\073\uffe5\075\uffe5\076\uffe5\001\002\000\046\011\uffe3" +
    "\031\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3\063\uffe3\064\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\076\uffe3\001\002\000\046\013" +
    "\u014d\014\u013c\015\u0144\016\u0147\022\u013f\025\u013d\026\u0146" +
    "\027\u0145\030\u014a\034\u013e\035\u013b\036\u0141\066\u0140\071" +
    "\u0143\072\u0149\073\u014b\075\u0142\076\u0148\001\002\000\050" +
    "\013\u014d\014\u013c\015\u0144\016\u0147\017\u017c\022\u013f\025" +
    "\u013d\026\u0146\027\u0145\030\u014a\034\u013e\035\u013b\036\u0141" +
    "\066\u0140\071\u0143\072\u0149\073\u014b\075\u0142\076\u0148\001" +
    "\002\000\046\011\uffe4\031\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051" +
    "\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\076\uffe4" +
    "\001\002\000\014\012\057\073\062\074\060\075\061\076" +
    "\055\001\002\000\004\017\u017f\001\002\000\046\011\uffe0" +
    "\031\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\063\uffe0\064\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\076\uffe0\001\002\000\006\017" +
    "\u0182\022\u0181\001\002\000\014\012\057\073\062\074\060" +
    "\075\061\076\055\001\002\000\046\011\uffe8\031\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\050\uffe8\051\uffe8\063\uffe8\064\uffe8\066\uffe8\067" +
    "\uffe8\070\uffe8\076\uffe8\001\002\000\004\017\u0184\001\002" +
    "\000\046\011\uffe9\031\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9" +
    "\063\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9\076\uffe9\001" +
    "\002\000\046\013\uffb3\014\uffb3\015\uffb3\016\uffb3\022\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\066\uffb3\071\uffb3\072\uffb3\073\uffb3\075\uffb3\076\uffb3" +
    "\001\002\000\046\013\u014d\014\u013c\015\u0144\016\u0147\022" +
    "\u013f\025\u013d\026\u0146\027\u0145\030\u014a\034\u013e\035\u013b" +
    "\036\u0141\066\u0140\071\u0143\072\u0149\073\u014b\075\u0142\076" +
    "\u0148\001\002\000\050\005\u0188\013\u014d\014\u013c\015\u0144" +
    "\016\u0147\022\u013f\025\u013d\026\u0146\027\u0145\030\u014a\034" +
    "\u013e\035\u013b\036\u0141\066\u0140\071\u0143\072\u0149\073\u014b" +
    "\075\u0142\076\u0148\001\002\000\004\010\u0189\001\002\000" +
    "\036\031\uffb2\037\uffb2\040\uffb2\041\uffb2\044\uffb2\046\uffb2" +
    "\050\uffb2\051\uffb2\063\uffb2\064\uffb2\066\uffb2\067\uffb2\070" +
    "\uffb2\076\uffb2\001\002\000\036\031\045\037\030\040\020" +
    "\041\025\044\046\046\027\050\043\051\026\063\032\064" +
    "\021\066\024\067\040\070\051\076\036\001\002\000\040" +
    "\011\u018c\031\045\037\030\040\020\041\025\044\046\046" +
    "\027\050\043\051\026\063\032\064\021\066\024\067\040" +
    "\070\051\076\036\001\002\000\044\011\uffb1\031\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\050\uffb1\051\uffb1\063\uffb1\064\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\076\uffb1\001\002\000\004\047\u018e\001\002\000\004" +
    "\004\u018f\001\002\000\046\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\066\uffc9\071\uffc9\072\uffc9\073\uffc9\075" +
    "\uffc9\076\uffc9\001\002\000\046\013\u01a4\014\u0191\015\u019a" +
    "\016\u019e\022\u0194\025\u0193\026\u019c\027\u019b\030\u01a1\034" +
    "\u0195\035\u0192\036\u0197\066\u0196\071\u0199\072\u01a0\073\u01a3" +
    "\075\u0198\076\u019f\001\002\000\050\005\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\022\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\034\uffbc\035\uffbc\036\uffbc\066\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\075\uffbc\076\uffbc\001\002\000\050\005\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\022\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\034\uffb6\035\uffb6\036\uffb6\066\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\001\002\000" +
    "\050\005\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\022\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\066\uffbb\071\uffbb\072\uffbb\073\uffbb\075\uffbb\076\uffbb" +
    "\001\002\000\050\005\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\022\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\066\uffb7\071\uffb7\072\uffb7\073\uffb7\075" +
    "\uffb7\076\uffb7\001\002\000\050\005\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\022\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\066\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\075\uffb5\076\uffb5\001\002\000\050\005\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\022\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\034\uffc3\035\uffc3\036\uffc3\066\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\075\uffc3\076\uffc3\001\002\000\050" +
    "\005\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\022\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\066\uffb4\071\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4\001" +
    "\002\000\050\005\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\022\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\066\uffc4\071\uffc4\072\uffc4\073\uffc4\075\uffc4" +
    "\076\uffc4\001\002\000\050\005\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\022\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\066\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\075\uffc1\076\uffc1\001\002\000\050\005\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\022\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe\066\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\075\uffbe\076\uffbe\001\002\000\050\005" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\022\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\034\uffb9\035\uffb9\036\uffb9\066" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\075\uffb9\076\uffb9\001\002" +
    "\000\050\005\uffba\013\uffba\014\uffba\015\uffba\016\uffba\022" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\034\uffba\035\uffba" +
    "\036\uffba\066\uffba\071\uffba\072\uffba\073\uffba\075\uffba\076" +
    "\uffba\001\002\000\050\005\u01a5\013\u01a4\014\u0191\015\u019a" +
    "\016\u019e\022\u0194\025\u0193\026\u019c\027\u019b\030\u01a1\034" +
    "\u0195\035\u0192\036\u0197\066\u0196\071\u0199\072\u01a0\073\u01a3" +
    "\075\u0198\076\u019f\001\002\000\050\005\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\022\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\034\uffbd\035\uffbd\036\uffbd\066\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\075\uffbd\076\uffbd\001\002\000\050\005\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\022\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\034\uffc5\035\uffc5\036\uffc5\066\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\075\uffc5\076\uffc5\001\002\000" +
    "\050\005\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\022\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\066\uffc0\071\uffc0\072\uffc0\073\uffc0\075\uffc0\076\uffc0" +
    "\001\002\000\050\005\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\022\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\066\uffb8\071\uffb8\072\uffb8\073\uffb8\075" +
    "\uffb8\076\uffb8\001\002\000\050\005\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\022\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\066\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\075\uffc6\076\uffc6\001\002\000\050\005\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\022\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\034\uffc2\035\uffc2\036\uffc2\066\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\075\uffc2\076\uffc2\001\002\000\050" +
    "\005\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\022\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\066\uffbf\071\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\001" +
    "\002\000\004\017\u01a7\001\002\000\050\005\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\022\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\034\uffc7\035\uffc7\036\uffc7\066\uffc7\071\uffc7" +
    "\072\uffc7\073\uffc7\075\uffc7\076\uffc7\001\002\000\044\011" +
    "\uffc8\031\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\050\uffc8\051\uffc8\063\uffc8\064\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\076\uffc8\001\002\000\004\076\u01a9" +
    "\001\002\000\004\005\u01aa\001\002\000\004\010\u01ab\001" +
    "\002\000\006\043\uff88\045\uff88\001\002\000\006\043\u01b0" +
    "\045\u01ad\001\002\000\004\020\u01bf\001\002\000\010\011" +
    "\uff85\043\uff85\045\uff85\001\002\000\010\011\u01be\043\u01b0" +
    "\045\u01ad\001\002\000\010\012\u01b1\073\u01b3\075\u01b2\001" +
    "\002\000\004\020\uff82\001\002\000\004\020\uff80\001\002" +
    "\000\004\020\uff84\001\002\000\004\020\u01b5\001\002\000" +
    "\036\031\045\037\030\040\020\041\025\044\046\046\027" +
    "\050\043\051\026\063\032\064\021\066\024\067\040\070" +
    "\051\076\036\001\002\000\044\011\uff83\031\045\037\030" +
    "\040\020\041\025\043\uff83\044\046\045\uff83\046\027\050" +
    "\043\051\026\063\032\064\021\066\024\067\040\070\051" +
    "\076\036\001\002\000\004\020\u01b8\001\002\000\036\031" +
    "\045\037\030\040\020\041\025\044\046\046\027\050\043" +
    "\051\026\063\032\064\021\066\024\067\040\070\051\076" +
    "\036\001\002\000\044\011\uff7f\031\045\037\030\040\020" +
    "\041\025\043\uff7f\044\046\045\uff7f\046\027\050\043\051" +
    "\026\063\032\064\021\066\024\067\040\070\051\076\036" +
    "\001\002\000\004\020\u01bb\001\002\000\036\031\045\037" +
    "\030\040\020\041\025\044\046\046\027\050\043\051\026" +
    "\063\032\064\021\066\024\067\040\070\051\076\036\001" +
    "\002\000\044\011\uff81\031\045\037\030\040\020\041\025" +
    "\043\uff81\044\046\045\uff81\046\027\050\043\051\026\063" +
    "\032\064\021\066\024\067\040\070\051\076\036\001\002" +
    "\000\010\011\uff86\043\uff86\045\uff86\001\002\000\044\011" +
    "\uff87\031\uff87\037\uff87\040\uff87\041\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\050\uff87\051\uff87\063\uff87\064\uff87\066" +
    "\uff87\067\uff87\070\uff87\076\uff87\001\002\000\036\031\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\044\uff7e\046\uff7e\050\uff7e\051" +
    "\uff7e\063\uff7e\064\uff7e\066\uff7e\067\uff7e\070\uff7e\076\uff7e" +
    "\001\002\000\036\031\045\037\030\040\020\041\025\044" +
    "\046\046\027\050\043\051\026\063\032\064\021\066\024" +
    "\067\040\070\051\076\036\001\002\000\044\011\uff7d\031" +
    "\045\037\030\040\020\041\025\043\uff7d\044\046\045\uff7d" +
    "\046\027\050\043\051\026\063\032\064\021\066\024\067" +
    "\040\070\051\076\036\001\002\000\046\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\022\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\034\uff91\035\uff91\036\uff91\066\uff91\071\uff91\072\uff91" +
    "\073\uff91\075\uff91\076\uff91\001\002\000\046\013\u014d\014" +
    "\u013c\015\u0144\016\u0147\022\u013f\025\u013d\026\u0146\027\u0145" +
    "\030\u014a\034\u013e\035\u013b\036\u0141\066\u0140\071\u0143\072" +
    "\u0149\073\u014b\075\u0142\076\u0148\001\002\000\050\005\u01c5" +
    "\013\u014d\014\u013c\015\u0144\016\u0147\022\u013f\025\u013d\026" +
    "\u0146\027\u0145\030\u014a\034\u013e\035\u013b\036\u0141\066\u0140" +
    "\071\u0143\072\u0149\073\u014b\075\u0142\076\u0148\001\002\000" +
    "\004\010\u01c6\001\002\000\036\031\uff90\037\uff90\040\uff90" +
    "\041\uff90\044\uff90\046\uff90\050\uff90\051\uff90\063\uff90\064" +
    "\uff90\066\uff90\067\uff90\070\uff90\076\uff90\001\002\000\036" +
    "\031\045\037\030\040\020\041\025\044\046\046\027\050" +
    "\043\051\026\063\032\064\021\066\024\067\040\070\051" +
    "\076\036\001\002\000\040\011\u01c9\031\045\037\030\040" +
    "\020\041\025\044\046\046\027\050\043\051\026\063\032" +
    "\064\021\066\024\067\040\070\051\076\036\001\002\000" +
    "\044\011\uff8f\031\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\063\uff8f\064" +
    "\uff8f\066\uff8f\067\uff8f\070\uff8f\076\uff8f\001\002\000\006" +
    "\017\u01cc\022\u01cb\001\002\000\014\012\057\073\062\074" +
    "\060\075\061\076\055\001\002\000\046\011\uffe6\031\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\063\uffe6\064\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\076\uffe6\001\002\000\004\017\u01ce\001" +
    "\002\000\046\011\uffe7\031\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7\051" +
    "\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7\076\uffe7" +
    "\001\002\000\004\010\u01d0\001\002\000\036\031\uff89\037" +
    "\uff89\040\uff89\041\uff89\044\uff89\046\uff89\050\uff89\051\uff89" +
    "\063\uff89\064\uff89\066\uff89\067\uff89\070\uff89\076\uff89\001" +
    "\002\000\004\011\u01d2\001\002\000\004\002\ufffb\001\002" +
    "\000\006\017\u01d5\022\u01d4\001\002\000\014\012\057\073" +
    "\062\074\060\075\061\076\055\001\002\000\046\011\uffea" +
    "\031\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\063\uffea\064\uffea" +
    "\066\uffea\067\uffea\070\uffea\076\uffea\001\002\000\004\017" +
    "\uffec\001\002\000\004\017\u01d8\001\002\000\046\011\uffeb" +
    "\031\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\063\uffeb\064\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\076\uffeb\001\002\000\036\031" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\044\uffb0\046\uffb0\050\uffb0" +
    "\051\uffb0\063\uffb0\064\uffb0\066\uffb0\067\uffb0\070\uffb0\076" +
    "\uffb0\001\002\000\004\004\u01db\001\002\000\046\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\022\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\034\uffae\035\uffae\036\uffae\066\uffae\071\uffae" +
    "\072\uffae\073\uffae\075\uffae\076\uffae\001\002\000\046\013" +
    "\u014d\014\u013c\015\u0144\016\u0147\022\u013f\025\u013d\026\u0146" +
    "\027\u0145\030\u014a\034\u013e\035\u013b\036\u0141\066\u0140\071" +
    "\u0143\072\u0149\073\u014b\075\u0142\076\u0148\001\002\000\050" +
    "\005\u01de\013\u014d\014\u013c\015\u0144\016\u0147\022\u013f\025" +
    "\u013d\026\u0146\027\u0145\030\u014a\034\u013e\035\u013b\036\u0141" +
    "\066\u0140\071\u0143\072\u0149\073\u014b\075\u0142\076\u0148\001" +
    "\002\000\004\010\u01df\001\002\000\036\031\uffad\037\uffad" +
    "\040\uffad\041\uffad\044\uffad\046\uffad\050\uffad\051\uffad\063" +
    "\uffad\064\uffad\066\uffad\067\uffad\070\uffad\076\uffad\001\002" +
    "\000\036\031\045\037\030\040\020\041\025\044\046\046" +
    "\027\050\043\051\026\063\032\064\021\066\024\067\040" +
    "\070\051\076\036\001\002\000\040\011\u01e2\031\045\037" +
    "\030\040\020\041\025\044\046\046\027\050\043\051\026" +
    "\063\032\064\021\066\024\067\040\070\051\076\036\001" +
    "\002\000\044\011\uffac\031\uffac\037\uffac\040\uffac\041\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051\uffac\063" +
    "\uffac\064\uffac\066\uffac\067\uffac\070\uffac\076\uffac\001\002" +
    "\000\036\031\045\037\030\040\020\041\025\044\046\046" +
    "\027\050\043\051\026\063\032\064\021\066\024\067\040" +
    "\070\051\076\036\001\002\000\040\011\u01e5\031\045\037" +
    "\030\040\020\041\025\044\046\046\027\050\043\051\026" +
    "\063\032\064\021\066\024\067\040\070\051\076\036\001" +
    "\002\000\044\011\uffaf\031\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\063" +
    "\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf\076\uffaf\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\012\001" +
    "\001\000\006\004\015\055\013\001\001\000\034\005\021" +
    "\006\032\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\u0134\017\022" +
    "\020\033\021\034\022\036\023\041\024\046\025\030\034" +
    "\040\036\043\037\016\042\047\056\u01d0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\071\001\001\000\004\051\070\001\001\000" +
    "\004\051\067\001\001\000\004\051\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\073\001\001\000\002\001\001\000\004" +
    "\051\103\001\001\000\004\051\102\001\001\000\004\051" +
    "\101\001\001\000\004\051\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\116\001\001\000\004\051\115\001\001\000" +
    "\004\051\114\001\001\000\004\051\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\131\012\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\145\015\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\165\015\143\001\001" +
    "\000\004\015\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\221\016\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\273\016\220\001\001\000\004\016\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\304\027\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\320\033\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\320\033" +
    "\340\001\001\000\004\032\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\355\031\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\u010b\031\354\001\001\000\004\031\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\u0114\010\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\u0132" +
    "\006\032\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\034\006\u0134\017\022\020\033\021\034\022\036\023" +
    "\041\024\046\025\030\034\040\036\043\037\016\042\047" +
    "\073\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\u0138\001\001" +
    "\000\006\045\u0139\053\u014b\001\001\000\006\053\u014e\075" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u0173\001" +
    "\001\000\034\005\u0174\006\032\017\022\020\033\021\034" +
    "\022\036\023\041\024\046\025\030\034\040\036\043\037" +
    "\016\042\047\001\001\000\032\006\u0134\017\022\020\033" +
    "\021\034\022\036\023\041\024\046\025\030\034\040\036" +
    "\043\037\016\042\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\u0179\001\001\000\002\001\001\000" +
    "\006\045\u017a\053\u014b\001\001\000\004\053\u014e\001\001" +
    "\000\002\001\001\000\004\051\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0182" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0185\001\001\000\006\045\u0186\053\u014b" +
    "\001\001\000\004\053\u014e\001\001\000\002\001\001\000" +
    "\004\063\u0189\001\001\000\034\005\u018a\006\032\017\022" +
    "\020\033\021\034\022\036\023\041\024\046\025\030\034" +
    "\040\036\043\037\016\042\047\001\001\000\032\006\u0134" +
    "\017\022\020\033\021\034\022\036\023\041\024\046\025" +
    "\030\034\040\036\043\037\016\042\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u018f\001\001\000\006\043\u01a1\044\u019c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u01a5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u01ab\001\001\000\006\040\u01ae\041\u01ad\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u01bc" +
    "\001\001\000\002\001\001\000\004\100\u01b9\001\001\000" +
    "\004\101\u01b6\001\001\000\004\077\u01b3\001\001\000\002" +
    "\001\001\000\034\005\u01b5\006\032\017\022\020\033\021" +
    "\034\022\036\023\041\024\046\025\030\034\040\036\043" +
    "\037\016\042\047\001\001\000\032\006\u0134\017\022\020" +
    "\033\021\034\022\036\023\041\024\046\025\030\034\040" +
    "\036\043\037\016\042\047\001\001\000\002\001\001\000" +
    "\034\005\u01b8\006\032\017\022\020\033\021\034\022\036" +
    "\023\041\024\046\025\030\034\040\036\043\037\016\042" +
    "\047\001\001\000\032\006\u0134\017\022\020\033\021\034" +
    "\022\036\023\041\024\046\025\030\034\040\036\043\037" +
    "\016\042\047\001\001\000\002\001\001\000\034\005\u01bb" +
    "\006\032\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\032\006\u0134\017\022\020\033\021\034\022\036\023" +
    "\041\024\046\025\030\034\040\036\043\037\016\042\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u01bf\001\001\000\034\005\u01c0\006\032\017\022\020\033" +
    "\021\034\022\036\023\041\024\046\025\030\034\040\036" +
    "\043\037\016\042\047\001\001\000\032\006\u0134\017\022" +
    "\020\033\021\034\022\036\023\041\024\046\025\030\034" +
    "\040\036\043\037\016\042\047\001\001\000\004\070\u01c2" +
    "\001\001\000\006\045\u01c3\053\u014b\001\001\000\004\053" +
    "\u014e\001\001\000\002\001\001\000\004\071\u01c6\001\001" +
    "\000\034\005\u01c7\006\032\017\022\020\033\021\034\022" +
    "\036\023\041\024\046\025\030\034\040\036\043\037\016" +
    "\042\047\001\001\000\032\006\u0134\017\022\020\033\021" +
    "\034\022\036\023\041\024\046\025\030\034\040\036\043" +
    "\037\016\042\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u01cc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u01d5\001\001\000\002\001\001\000\004\057" +
    "\u01d6\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u01e2\001\001\000\002\001\001\000\004\065\u01db\001" +
    "\001\000\006\045\u01dc\053\u014b\001\001\000\004\053\u014e" +
    "\001\001\000\002\001\001\000\004\066\u01df\001\001\000" +
    "\034\005\u01e0\006\032\017\022\020\033\021\034\022\036" +
    "\023\041\024\046\025\030\034\040\036\043\037\016\042" +
    "\047\001\001\000\032\006\u0134\017\022\020\033\021\034" +
    "\022\036\023\041\024\046\025\030\034\040\036\043\037" +
    "\016\042\047\001\001\000\002\001\001\000\034\005\u01e3" +
    "\006\032\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\032\006\u0134\017\022\020\033\021\034\022\036\023" +
    "\041\024\046\025\030\034\040\036\043\037\016\042\047" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String out = "";
    public String iteraciones;
    
    int C_I = 0;
    public DoublyLinkedList list_json;
    public DoublyLinkedList list_V_G;
    public GraficaBarras grafica_barras;
    public GraficaPie grafica_pie;
    public void implementar_iteracion(){
        iteraciones = "";
        int contador = 0;
        boolean asd = true; 
        while(asd){
            iteraciones = iteraciones + "    ";
            if(contador == C_I){
                break;
            }
            contador = contador + 1;
        }
    }
    public void List_json(DoublyLinkedList _list_json){
        list_json = _list_json;
    }
    public void div_list_V_G(DoublyLinkedList _list_V_G){
        list_V_G = _list_V_G;
    }
    
    public void div_list_Grafica_barras(GraficaBarras _grafica_barras){
        grafica_barras = _grafica_barras;
    }
    public void div_list_Grafica_Pie(GraficaPie _grafica_pie){
        grafica_pie = _grafica_pie;
    }
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= void_main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
out = out + "def main( ):\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // void_main ::= VOID MAIN PAR_IZQ PAR_DER LLAVE_IZQ NT$0 void_main_aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
out = out + "if__name__ = “__main__”:\n"+iteraciones+"main()";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // void_main_aux ::= NT$1 sentencias NT$2 LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		C_I = C_I - 1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_main_aux",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // void_main_aux ::= LLAVE_DER 
            {
              Object RESULT =null;
		out = out + "if__name__ = “__main__”:\n"+"   "+"main()";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_main_aux",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentencia_tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentencia_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= console_write 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_definir_globales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_grafica_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_grafica_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= BRAKE PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out + iteraciones+a+" "+"="+" "+b+"\n";String[] resul = new String[2];resul[0] = a;resul[1]=b;RESULT = resul;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_tipo_dato ::= INT NOMBRE_DATO IGUAL entero_y_signos NT$3 PTCOMA 
            {
              String[] RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_tipo_dato ::= INT NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_tipo_dato ::= STRING NOMBRE_DATO IGUAL entero_y_signos PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_tipo_dato ::= STRING NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_tipo_dato ::= CHAR NOMBRE_DATO IGUAL entero_y_signos PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_tipo_dato ::= CHAR NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
out += iteraciones+a+" "+"= ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_tipo_dato ::= BOOL NOMBRE_DATO IGUAL NT$4 parametros_if_else PTCOMA 
            {
              String[] RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		out = out +"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_tipo_dato ::= BOOL NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_tipo_dato ::= DOUBLE NOMBRE_DATO IGUAL entero_y_signos PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";String[] resul = new String[2];resul[0] = a;resul[1]=b;RESULT = resul;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_tipo_dato ::= DOUBLE NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_tipo_dato ::= NOMBRE_DATO IGUAL entero_y_signos PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";String[] resul = new String[2];resul[0] = a;resul[1]=b;RESULT = resul;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // True_False ::= FALSE 
            {
              String RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("True_False",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // True_False ::= TRUE 
            {
              String RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("True_False",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // entero_y_signos_val ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos_val",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // entero_y_signos ::= ENTERO MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" + "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // entero_y_signos ::= DATO_STRING MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" + "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // entero_y_signos ::= DATO_CHAR MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" + "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // entero_y_signos ::= ENTERO MENOS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" - "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // entero_y_signos ::= ENTERO POR entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" * "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // entero_y_signos ::= ENTERO DIV entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" / "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // entero_y_signos ::= NOMBRE_DATO MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" + "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // entero_y_signos ::= NOMBRE_DATO MENOS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" - "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // entero_y_signos ::= NOMBRE_DATO POR entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" * "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // entero_y_signos ::= NOMBRE_DATO DIV entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" / "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // entero_y_signos ::= DECIMAL MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" + "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // entero_y_signos ::= DECIMAL MENOS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" - "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // entero_y_signos ::= DECIMAL POR entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" * "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // entero_y_signos ::= DECIMAL DIV entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" / "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // entero_y_signos ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // entero_y_signos ::= NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // entero_y_signos ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // entero_y_signos ::= DATO_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // entero_y_signos ::= DATO_CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$5 ::= 
            {
              Object RESULT =null;
out = out + iteraciones+"print(";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // console_write ::= CONSOLE PUNTO WRITE PAR_IZQ NT$5 consoles_write PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		out = out + ")\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // consoles_write ::= consoles_write console_write_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("consoles_write",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // consoles_write ::= console_write_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("consoles_write",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // console_write_variables ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // console_write_variables ::= DATO_STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // console_write_variables ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // console_write_variables ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // console_write_variables ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // console_write_variables ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // console_write_variables ::= MAS 
            {
              Object RESULT =null;
		out += " , ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // console_write_variables ::= POR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // console_write_variables ::= DIV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // console_write_variables ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // console_write_variables ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // console_write_variables ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // console_write_variables ::= DISTINTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // console_write_variables ::= DOBLEIGUAL 
            {
              Object RESULT =null;
		out += " == ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // console_write_variables ::= IGUAL 
            {
              Object RESULT =null;
		out += "=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // console_write_variables ::= AND 
            {
              Object RESULT =null;
		out += " and ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // console_write_variables ::= OR 
            {
              Object RESULT =null;
		out += " or ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // console_write_variables ::= NOT 
            {
              Object RESULT =null;
		out += " not ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$6 ::= 
            {
              Object RESULT =null;
out += iteraciones+"if"+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
out += ":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_if_else ::= IF PAR_IZQ NT$6 parametros_if_else PAR_DER LLAVE_IZQ NT$7 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$8 ::= 
            {
              Object RESULT =null;
out = out + iteraciones+"else:"+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia_if_else ::= ELSE LLAVE_IZQ NT$8 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$9 ::= 
            {
              Object RESULT =null;
out += iteraciones+"elif"+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
out = out +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_if_else ::= ELSE IF PAR_IZQ NT$9 parametros_if_else PAR_DER LLAVE_IZQ NT$10 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_if_else_aux ::= NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += " "+a+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros_if_else_aux ::= DATO_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += " "+a+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametros_if_else_aux ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += " "+a+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros_if_else_aux ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += " "+a+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_if_else_aux ::= TRUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_if_else_aux ::= FALSE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_if_else_aux ::= MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_if_else_aux ::= POR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_if_else_aux ::= DIV 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_if_else_aux ::= MENOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros_if_else_aux ::= MENOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_if_else_aux ::= MAYOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_if_else_aux ::= DISTINTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_if_else_aux ::= DOBLEIGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		out += " == ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_if_else_aux ::= IGUAL 
            {
              String RESULT =null;
		out += " = ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros_if_else_aux ::= AND 
            {
              String RESULT =null;
		out += " and ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros_if_else_aux ::= OR 
            {
              String RESULT =null;
		out += " or ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_if_else_aux ::= NOT 
            {
              String RESULT =null;
		out += " not ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_if_else ::= parametros_if_else parametros_if_else_aux 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_if_else ::= parametros_if_else_aux 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+a+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_for ::= FOR PAR_IZQ sentencia_for_parametros PAR_DER LLAVE_IZQ NT$11 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_for_parametros ::= INT NOMBRE_DATO IGUAL ENTERO PTCOMA NOMBRE_DATO MENOR ENTERO PTCOMA NOMBRE_DATO MAS MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dat = Integer.parseInt(b);dat = dat+1;RESULT = "for "+a+" in "+"range("+dat+","+c+"):";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_for_parametros ::= INT NOMBRE_DATO IGUAL ENTERO PTCOMA NOMBRE_DATO MAYOR ENTERO PTCOMA NOMBRE_DATO MAS MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dat = Integer.parseInt(b);dat = dat+1;RESULT = "for "+a+" in "+"range("+dat+","+c+"):";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_for_parametros ::= INT NOMBRE_DATO IGUAL ENTERO PTCOMA NOMBRE_DATO MENOR IGUAL ENTERO PTCOMA NOMBRE_DATO MAS MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dat = Integer.parseInt(b);dat = dat+1;RESULT = "for "+a+" in "+"range("+dat+","+c+"):";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_for_parametros ::= INT NOMBRE_DATO IGUAL ENTERO PTCOMA NOMBRE_DATO MAYOR IGUAL ENTERO PTCOMA NOMBRE_DATO MAS MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dat = Integer.parseInt(b);dat = dat+1;RESULT = "for "+a+" in "+"range("+dat+","+c+"):";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$12 ::= 
            {
              Object RESULT =null;
out += iteraciones+"while ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
out = out +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_while ::= WHILE PAR_IZQ NT$12 parametros_if_else PAR_DER LLAVE_IZQ NT$13 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones +a+" "+"="+" "+a+" "+"+"+" "+"1\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
out += iteraciones+"if(";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out +")\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_do_while ::= sentencia_do_while_aux_2 NT$14 sentencias NT$15 LLAVE_DER WHILE PAR_IZQ NT$16 parametros_if_else NT$17 PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		out = out + iteraciones+"    "+"break\n";C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_do_while_aux_2 ::= sentencia_tipo_dato DO LLAVE_IZQ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String _a = a[0];String _b = a[1];out = out + iteraciones+"i = "+_b+"\n"+iteraciones+"while true:"+"\n";RESULT = _a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while_aux_2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+"def switch(case,"+a+"):\n";C_I = C_I+1;implementar_iteracion();out = out + iteraciones+"switcher = {\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_switch ::= SWITCH PAR_IZQ NOMBRE_DATO PAR_DER LLAVE_IZQ NT$18 sentencias_valores_switch LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias_valores_switch ::= sentencias_valores_switch sentencia_valores_switch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_switch",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias_valores_switch ::= sentencia_valores_switch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_switch",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$19 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out + iteraciones+ a +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_valores_switch ::= CASE ENTERO NT$19 DOSPUT sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_valores_switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$20 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out + iteraciones+ a +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_valores_switch ::= CASE DATO_CHAR NT$20 DOSPUT sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_valores_switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$21 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out + iteraciones+ a +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_valores_switch ::= CASE DATO_STRING NT$21 DOSPUT sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_valores_switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$22 ::= 
            {
              String RESULT =null;
out = out + iteraciones+ "default" +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_valores_switch ::= DEFAULT DOSPUT NT$22 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		C_I = C_I-1;implementar_iteracion();C_I = C_I-1;implementar_iteracion();out = out + iteraciones +"}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_valores_switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencias_aux ::= sentencias_aux sentencia_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencias_aux ::= sentencia_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_aux ::= STRING NOMBRE_DATO IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _b = b.replaceAll("\"", "");list_V_G.Insertar_V_G(new V_G(a,_b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_aux ::= STRING NOMBRE_DATO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String _b = b.replaceAll("\"", "");String _c = c.replaceAll("\"", "");String valor_llave = list_json.busqueda_simbols_json_llave(_b,_c);list_V_G.Insertar_V_G(new V_G(a,valor_llave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_aux ::= DOUBLE NOMBRE_DATO IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		list_V_G.Insertar_V_G(new V_G(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_aux ::= DOUBLE NOMBRE_DATO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String _b = b.replaceAll("\"", "");String _c = c.replaceAll("\"", "");String valor_llave = list_json.busqueda_simbols_json_llave(_b,_c);list_V_G.Insertar_V_G(new V_G(a,valor_llave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_definir_globales ::= VOID DEFINIR_GLOVALES PAR_IZQ PAR_DER LLAVE_IZQ sentencias_aux LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_definir_globales",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencias_graficar ::= sentencias_graficar sentencia_graficar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencias_graficar ::= sentencia_graficar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencias_ejex_valores ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencias_ejex_valores ::= DATO_STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = a.replaceAll("\"","");grafica_barras.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencias_ejex_valores ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Get_Ejex().Insertar_DatosEjex(new DatosEjex(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencias_ejex_valores ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencias_ejex ::= sentencias_ejex sentencias_ejex_valores 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencias_ejex ::= sentencias_ejex_valores 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencias_valores_datos ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		grafica_barras.Get_valores().Insertar_DatosValores(new DatosValores(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentencias_valores_datos ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Get_valores().Insertar_DatosValores(new DatosValores(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencias_valores_datos ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Get_valores().Insertar_DatosValores(new DatosValores(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentencias_valores_datos ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencias_valores ::= sentencias_valores sentencias_valores_datos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencias_valores ::= sentencias_valores_datos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencia_graficar ::= STRING TITULO IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentencia_graficar ::= STRING TITULO IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_barras.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentencia_graficar ::= STRING TITULO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Set_Titulo(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencia_graficar ::= STRING COR_IZQ COR_DER EJEX IGUAL LLAVE_IZQ sentencias_ejex LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencia_graficar ::= DOUBLE COR_IZQ COR_DER VALORES IGUAL LLAVE_IZQ sentencias_valores LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencia_graficar ::= STRING DOBLECOR EJEX IGUAL LLAVE_IZQ sentencias_ejex LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencia_graficar ::= DOUBLE DOBLECOR VALORES IGUAL LLAVE_IZQ sentencias_valores LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentencia_graficar ::= STRING TITULOX IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Set_Titulox(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentencia_graficar ::= STRING TITULOY IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Set_Tituloy(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentencia_graficar ::= STRING TITULOX IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_barras.Set_Titulox(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentencia_graficar ::= STRING TITULOY IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_barras.Set_Tituloy(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentencia_graficar ::= STRING TITULOX IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Set_Titulox(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentencia_graficar ::= STRING TITULOY IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Set_Tituloy(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentencia_grafica_barras ::= VOID GRAFICA_BARRAS PAR_IZQ PAR_DER LLAVE_IZQ sentencias_graficar LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica_barras",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentencia_grafica_pie ::= VOID GRAFICA_PIE PAR_IZQ PAR_DER LLAVE_IZQ sentencias_graficar_pie LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica_pie",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // sentencias_graficar_pie ::= sentencias_graficar_pie sentencia_graficar_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar_pie",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // sentencias_graficar_pie ::= sentencia_graficar_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar_pie",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentencia_graficar_pie ::= STRING TITULO IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_pie.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentencia_graficar_pie ::= STRING TITULO IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_pie.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentencia_graficar_pie ::= STRING TITULO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_pie.Set_Titulo(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentencia_graficar_pie ::= STRING COR_IZQ COR_DER EJEX IGUAL LLAVE_IZQ sentencias_ejex_pie LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentencia_graficar_pie ::= DOUBLE COR_IZQ COR_DER VALORES IGUAL LLAVE_IZQ sentencias_valores_pie LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentencia_graficar_pie ::= STRING DOBLECOR EJEX IGUAL LLAVE_IZQ sentencias_ejex_pie LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentencia_graficar_pie ::= DOUBLE DOBLECOR VALORES IGUAL LLAVE_IZQ sentencias_valores_pie LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentencias_ejex_valores_pie ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_pie.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentencias_ejex_valores_pie ::= DATO_STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = a.replaceAll("\"","");grafica_pie.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentencias_ejex_valores_pie ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_pie.Get_Ejex().Insertar_DatosEjex(new DatosEjex(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentencias_ejex_valores_pie ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentencias_ejex_pie ::= sentencias_ejex_pie sentencias_ejex_valores_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_pie",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentencias_ejex_pie ::= sentencias_ejex_valores_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_pie",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentencias_valores_datos_pie ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		grafica_pie.Get_valores().Insertar_DatosValores(new DatosValores(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentencias_valores_datos_pie ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_pie.Get_valores().Insertar_DatosValores(new DatosValores(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentencias_valores_datos_pie ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_pie.Get_valores().Insertar_DatosValores(new DatosValores(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentencias_valores_datos_pie ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sentencias_valores_pie ::= sentencias_valores_pie sentencias_valores_datos_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_pie",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentencias_valores_pie ::= sentencias_valores_datos_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_pie",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorStatPy;

import java_cup.runtime.*;
import Model.DoublyLinkedList;
import Model.Symbols;
import Model.Symbols_Json;
import Model.V_G;
import Model.GraficaBarras;
import Model.GraficaPie;
import Model.DatosEjex;
import Model.DatosValores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\052" +
    "\002\000\002\003\011\000\002\053\002\000\002\054\002" +
    "\000\002\004\006\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\055\002\000" +
    "\002\017\010\000\002\017\005\000\002\017\007\000\002" +
    "\017\005\000\002\017\007\000\002\017\005\000\002\017" +
    "\007\000\002\017\005\000\002\017\007\000\002\017\005" +
    "\000\002\017\006\000\002\047\003\000\002\047\003\000" +
    "\002\051\002\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\042\011\000\002\043\005\000\002\043\005\000\002\043" +
    "\003\000\002\043\003\000\002\056\002\000\002\020\012" +
    "\000\002\057\002\000\002\020\007\000\002\060\002\000" +
    "\002\020\013\000\002\044\006\000\002\044\006\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\061\002\000\002\021\012\000\002\046\016\000\002\062" +
    "\002\000\002\022\012\000\002\063\002\000\002\064\002" +
    "\000\002\065\002\000\002\034\015\000\002\036\005\000" +
    "\002\066\002\000\002\037\012\000\002\040\004\000\002" +
    "\040\003\000\002\067\002\000\002\041\007\000\002\070" +
    "\002\000\002\041\006\000\002\007\004\000\002\007\003" +
    "\000\002\010\007\000\002\010\007\000\002\010\016\000" +
    "\002\023\011\000\002\011\004\000\002\011\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\012\000\002\016" +
    "\003\000\002\013\004\000\002\013\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\012\000\002\015\003\000" +
    "\002\014\004\000\002\014\003\000\002\012\007\000\002" +
    "\012\007\000\002\012\015\000\002\012\013\000\002\012" +
    "\013\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\015\000\002\012\015\000" +
    "\002\024\011\000\002\025\011\000\002\026\004\000\002" +
    "\026\003\000\002\027\007\000\002\027\007\000\002\027" +
    "\016\000\002\027\013\000\002\027\013\000\002\031\003" +
    "\000\002\031\003\000\002\031\012\000\002\031\003\000" +
    "\002\030\004\000\002\030\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\012\000\002\032\003\000\002\033" +
    "\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\004\030\006\001\002\000\004\002\u0192\001" +
    "\002\000\004\002\000\001\002\000\004\031\007\001\002" +
    "\000\004\004\010\001\002\000\004\005\011\001\002\000" +
    "\004\010\012\001\002\000\040\011\uffff\030\uffff\032\uffff" +
    "\033\uffff\034\uffff\037\uffff\041\uffff\043\uffff\044\uffff\056" +
    "\uffff\057\uffff\061\uffff\062\uffff\063\uffff\071\uffff\001\002" +
    "\000\040\011\015\030\ufffd\032\ufffd\033\ufffd\034\ufffd\037" +
    "\ufffd\041\ufffd\043\ufffd\044\ufffd\056\ufffd\057\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\071\ufffd\001\002\000\036\030\045\032" +
    "\030\033\020\034\024\037\046\041\026\043\043\044\027" +
    "\056\032\057\021\061\025\062\040\063\051\071\036\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufffe\001\002" +
    "\000\044\011\uffef\030\uffef\032\uffef\033\uffef\034\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef\056\uffef" +
    "\057\uffef\061\uffef\062\uffef\063\uffef\071\uffef\001\002\000" +
    "\006\010\u0186\032\u0187\001\002\000\004\071\u0180\001\002" +
    "\000\040\011\ufffc\030\045\032\030\033\020\034\024\037" +
    "\046\041\026\043\043\044\027\056\032\057\021\061\025" +
    "\062\040\063\051\071\036\001\002\000\046\011\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\u017c\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\043\ufff7\044\ufff7\056\ufff7\057\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\071\ufff7\001\002\000\004\004\u0175" +
    "\001\002\000\004\071\u0170\001\002\000\004\021\u0164\001" +
    "\002\000\004\004\u0152\001\002\000\004\004\u014b\001\002" +
    "\000\044\011\uffee\030\uffee\032\uffee\033\uffee\034\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee\056\uffee" +
    "\057\uffee\061\uffee\062\uffee\063\uffee\071\uffee\001\002\000" +
    "\004\071\u0146\001\002\000\044\011\ufff8\030\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043" +
    "\ufff8\044\ufff8\056\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\071\ufff8\001\002\000\044\011\ufff6\030\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6" +
    "\044\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6\063\ufff6\071" +
    "\ufff6\001\002\000\044\011\ufff4\030\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\044" +
    "\ufff4\056\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\071\ufff4" +
    "\001\002\000\004\022\u0143\001\002\000\044\011\ufff3\030" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\043\ufff3\044\ufff3\056\ufff3\057\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\071\ufff3\001\002\000\004\071\u013c\001\002" +
    "\000\044\011\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\056\ufff2" +
    "\057\ufff2\061\ufff2\062\ufff2\063\ufff2\071\ufff2\001\002\000" +
    "\044\011\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\056\ufff1\057" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\071\ufff1\001\002\000\004" +
    "\004\u0129\001\002\000\036\030\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\037\uffaf\041\uffaf\043\uffaf\044\uffaf\056\uffaf\057\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\071\uffaf\001\002\000\010\045" +
    "\113\046\115\047\114\001\002\000\004\017\112\001\002" +
    "\000\044\011\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\056\ufff0" +
    "\057\ufff0\061\ufff0\062\ufff0\063\ufff0\071\ufff0\001\002\000" +
    "\044\011\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\056\ufff5\057" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\071\ufff5\001\002\000\004" +
    "\071\052\001\002\000\006\017\054\022\053\001\002\000" +
    "\010\066\060\067\057\071\055\001\002\000\046\011\uffe2" +
    "\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\056\uffe2\057\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\071\uffe2\001\002\000\014\013" +
    "\102\014\103\015\105\016\104\017\uffd0\001\002\000\004" +
    "\017\101\001\002\000\014\013\071\014\072\015\074\016" +
    "\073\017\uffcf\001\002\000\014\013\061\014\062\015\064" +
    "\016\063\017\uffd1\001\002\000\010\066\060\067\057\071" +
    "\055\001\002\000\010\066\060\067\057\071\055\001\002" +
    "\000\010\066\060\067\057\071\055\001\002\000\010\066" +
    "\060\067\057\071\055\001\002\000\004\017\uffdb\001\002" +
    "\000\004\017\uffda\001\002\000\004\017\uffdc\001\002\000" +
    "\004\017\uffdd\001\002\000\010\066\060\067\057\071\055" +
    "\001\002\000\010\066\060\067\057\071\055\001\002\000" +
    "\010\066\060\067\057\071\055\001\002\000\010\066\060" +
    "\067\057\071\055\001\002\000\004\017\uffd3\001\002\000" +
    "\004\017\uffd2\001\002\000\004\017\uffd4\001\002\000\004" +
    "\017\uffd5\001\002\000\046\011\uffe3\030\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\043\uffe3\044\uffe3\056\uffe3\057\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\071\uffe3\001\002\000\010\066\060\067\057\071\055" +
    "\001\002\000\010\066\060\067\057\071\055\001\002\000" +
    "\010\066\060\067\057\071\055\001\002\000\010\066\060" +
    "\067\057\071\055\001\002\000\004\017\uffd7\001\002\000" +
    "\004\017\uffd6\001\002\000\004\017\uffd8\001\002\000\004" +
    "\017\uffd9\001\002\000\044\011\uffed\030\uffed\032\uffed\033" +
    "\uffed\034\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed" +
    "\044\uffed\056\uffed\057\uffed\061\uffed\062\uffed\063\uffed\071" +
    "\uffed\001\002\000\004\004\355\001\002\000\004\004\253" +
    "\001\002\000\004\004\116\001\002\000\004\005\117\001" +
    "\002\000\004\010\120\001\002\000\006\056\123\063\122" +
    "\001\002\000\010\011\uff9b\056\uff9b\063\uff9b\001\002\000" +
    "\004\006\226\001\002\000\012\006\131\051\127\054\132" +
    "\055\130\001\002\000\010\011\126\056\123\063\122\001" +
    "\002\000\010\011\uff9c\056\uff9c\063\uff9c\001\002\000\044" +
    "\011\uff83\030\uff83\032\uff83\033\uff83\034\uff83\036\uff83\037" +
    "\uff83\040\uff83\041\uff83\043\uff83\044\uff83\056\uff83\057\uff83" +
    "\061\uff83\062\uff83\063\uff83\071\uff83\001\002\000\004\022" +
    "\211\001\002\000\004\022\174\001\002\000\004\007\150" +
    "\001\002\000\004\022\133\001\002\000\010\023\135\070" +
    "\136\071\134\001\002\000\004\017\147\001\002\000\004" +
    "\010\140\001\002\000\004\017\137\001\002\000\010\011" +
    "\uff87\056\uff87\063\uff87\001\002\000\004\050\141\001\002" +
    "\000\004\024\142\001\002\000\004\070\143\001\002\000" +
    "\004\024\144\001\002\000\004\070\145\001\002\000\004" +
    "\011\146\001\002\000\010\011\uff85\056\uff85\063\uff85\001" +
    "\002\000\010\011\uff89\056\uff89\063\uff89\001\002\000\004" +
    "\052\151\001\002\000\004\022\152\001\002\000\004\010" +
    "\153\001\002\000\012\023\160\024\155\070\161\071\154" +
    "\001\002\000\014\011\uff9a\023\uff9a\024\uff9a\070\uff9a\071" +
    "\uff9a\001\002\000\014\011\uff97\023\uff97\024\uff97\070\uff97" +
    "\071\uff97\001\002\000\014\011\uff95\023\uff95\024\uff95\070" +
    "\uff95\071\uff95\001\002\000\014\011\172\023\160\024\155" +
    "\070\161\071\154\001\002\000\004\010\162\001\002\000" +
    "\014\011\uff99\023\uff99\024\uff99\070\uff99\071\uff99\001\002" +
    "\000\004\050\163\001\002\000\004\024\164\001\002\000" +
    "\004\070\165\001\002\000\004\024\166\001\002\000\004" +
    "\070\167\001\002\000\004\011\170\001\002\000\014\011" +
    "\uff98\023\uff98\024\uff98\070\uff98\071\uff98\001\002\000\014" +
    "\011\uff96\023\uff96\024\uff96\070\uff96\071\uff96\001\002\000" +
    "\004\017\173\001\002\000\010\011\uff8b\056\uff8b\063\uff8b" +
    "\001\002\000\010\023\176\070\177\071\175\001\002\000" +
    "\004\017\210\001\002\000\004\010\201\001\002\000\004" +
    "\017\200\001\002\000\010\011\uff86\056\uff86\063\uff86\001" +
    "\002\000\004\050\202\001\002\000\004\024\203\001\002" +
    "\000\004\070\204\001\002\000\004\024\205\001\002\000" +
    "\004\070\206\001\002\000\004\011\207\001\002\000\010" +
    "\011\uff84\056\uff84\063\uff84\001\002\000\010\011\uff88\056" +
    "\uff88\063\uff88\001\002\000\010\023\213\070\214\071\212" +
    "\001\002\000\004\017\225\001\002\000\004\010\216\001" +
    "\002\000\004\017\215\001\002\000\010\011\uff8d\056\uff8d" +
    "\063\uff8d\001\002\000\004\050\217\001\002\000\004\024" +
    "\220\001\002\000\004\070\221\001\002\000\004\024\222" +
    "\001\002\000\004\070\223\001\002\000\004\011\224\001" +
    "\002\000\010\011\uff8c\056\uff8c\063\uff8c\001\002\000\010" +
    "\011\uff8e\056\uff8e\063\uff8e\001\002\000\004\007\227\001" +
    "\002\000\004\053\230\001\002\000\004\022\231\001\002" +
    "\000\004\010\232\001\002\000\012\023\236\024\235\067" +
    "\237\071\233\001\002\000\014\011\uff93\023\uff93\024\uff93" +
    "\067\uff93\071\uff93\001\002\000\014\011\uff8f\023\uff8f\024" +
    "\uff8f\067\uff8f\071\uff8f\001\002\000\014\011\uff91\023\uff91" +
    "\024\uff91\067\uff91\071\uff91\001\002\000\004\010\244\001" +
    "\002\000\014\011\uff94\023\uff94\024\uff94\067\uff94\071\uff94" +
    "\001\002\000\014\011\242\023\236\024\235\067\237\071" +
    "\233\001\002\000\014\011\uff90\023\uff90\024\uff90\067\uff90" +
    "\071\uff90\001\002\000\004\017\243\001\002\000\010\011" +
    "\uff8a\056\uff8a\063\uff8a\001\002\000\004\050\245\001\002" +
    "\000\004\024\246\001\002\000\004\070\247\001\002\000" +
    "\004\024\250\001\002\000\004\070\251\001\002\000\004" +
    "\011\252\001\002\000\014\011\uff92\023\uff92\024\uff92\067" +
    "\uff92\071\uff92\001\002\000\004\005\254\001\002\000\004" +
    "\010\255\001\002\000\006\056\256\063\257\001\002\000" +
    "\006\006\312\051\311\001\002\000\004\006\264\001\002" +
    "\000\010\011\uff80\056\uff80\063\uff80\001\002\000\010\011" +
    "\263\056\256\063\257\001\002\000\010\011\uff81\056\uff81" +
    "\063\uff81\001\002\000\044\011\uff82\030\uff82\032\uff82\033" +
    "\uff82\034\uff82\036\uff82\037\uff82\040\uff82\041\uff82\043\uff82" +
    "\044\uff82\056\uff82\057\uff82\061\uff82\062\uff82\063\uff82\071" +
    "\uff82\001\002\000\004\007\265\001\002\000\004\053\266" +
    "\001\002\000\004\022\267\001\002\000\004\010\270\001" +
    "\002\000\012\023\275\024\271\067\276\071\272\001\002" +
    "\000\014\011\uff71\023\uff71\024\uff71\067\uff71\071\uff71\001" +
    "\002\000\014\011\uff73\023\uff73\024\uff73\067\uff73\071\uff73" +
    "\001\002\000\014\011\307\023\275\024\271\067\276\071" +
    "\272\001\002\000\014\011\uff6f\023\uff6f\024\uff6f\067\uff6f" +
    "\071\uff6f\001\002\000\004\010\277\001\002\000\014\011" +
    "\uff74\023\uff74\024\uff74\067\uff74\071\uff74\001\002\000\004" +
    "\050\300\001\002\000\004\024\301\001\002\000\004\070" +
    "\302\001\002\000\004\024\303\001\002\000\004\070\304" +
    "\001\002\000\004\011\305\001\002\000\014\011\uff72\023" +
    "\uff72\024\uff72\067\uff72\071\uff72\001\002\000\014\011\uff70" +
    "\023\uff70\024\uff70\067\uff70\071\uff70\001\002\000\004\017" +
    "\310\001\002\000\010\011\uff7b\056\uff7b\063\uff7b\001\002" +
    "\000\004\022\337\001\002\000\004\007\313\001\002\000" +
    "\004\052\314\001\002\000\004\022\315\001\002\000\004" +
    "\010\316\001\002\000\012\023\323\024\320\070\324\071" +
    "\317\001\002\000\014\011\uff7a\023\uff7a\024\uff7a\070\uff7a" +
    "\071\uff7a\001\002\000\014\011\uff77\023\uff77\024\uff77\070" +
    "\uff77\071\uff77\001\002\000\014\011\uff75\023\uff75\024\uff75" +
    "\070\uff75\071\uff75\001\002\000\014\011\335\023\323\024" +
    "\320\070\324\071\317\001\002\000\004\010\325\001\002" +
    "\000\014\011\uff79\023\uff79\024\uff79\070\uff79\071\uff79\001" +
    "\002\000\004\050\326\001\002\000\004\024\327\001\002" +
    "\000\004\070\330\001\002\000\004\024\331\001\002\000" +
    "\004\070\332\001\002\000\004\011\333\001\002\000\014" +
    "\011\uff78\023\uff78\024\uff78\070\uff78\071\uff78\001\002\000" +
    "\014\011\uff76\023\uff76\024\uff76\070\uff76\071\uff76\001\002" +
    "\000\004\017\336\001\002\000\010\011\uff7c\056\uff7c\063" +
    "\uff7c\001\002\000\010\023\341\070\342\071\340\001\002" +
    "\000\004\017\354\001\002\000\004\010\344\001\002\000" +
    "\004\017\343\001\002\000\010\011\uff7e\056\uff7e\063\uff7e" +
    "\001\002\000\004\050\345\001\002\000\004\024\346\001" +
    "\002\000\004\070\347\001\002\000\004\024\350\001\002" +
    "\000\004\070\351\001\002\000\004\011\352\001\002\000" +
    "\004\017\353\001\002\000\010\011\uff7d\056\uff7d\063\uff7d" +
    "\001\002\000\010\011\uff7f\056\uff7f\063\uff7f\001\002\000" +
    "\004\005\356\001\002\000\004\010\357\001\002\000\006" +
    "\056\361\063\362\001\002\000\010\011\uffa1\056\uffa1\063" +
    "\uffa1\001\002\000\004\071\u0103\001\002\000\004\071\366" +
    "\001\002\000\010\011\365\056\361\063\362\001\002\000" +
    "\010\011\uffa2\056\uffa2\063\uffa2\001\002\000\044\011\uff9d" +
    "\030\uff9d\032\uff9d\033\uff9d\034\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\043\uff9d\044\uff9d\056\uff9d\057\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\071\uff9d\001\002\000\004\022\367\001" +
    "\002\000\006\023\370\067\371\001\002\000\004\010\373" +
    "\001\002\000\004\017\372\001\002\000\010\011\uff9f\056" +
    "\uff9f\063\uff9f\001\002\000\004\050\374\001\002\000\004" +
    "\024\375\001\002\000\004\070\376\001\002\000\004\024" +
    "\377\001\002\000\004\070\u0100\001\002\000\004\011\u0101" +
    "\001\002\000\004\017\u0102\001\002\000\010\011\uff9e\056" +
    "\uff9e\063\uff9e\001\002\000\004\022\u0104\001\002\000\004" +
    "\070\u0105\001\002\000\004\017\u0106\001\002\000\010\011" +
    "\uffa0\056\uffa0\063\uffa0\001\002\000\036\030\045\032\030" +
    "\033\020\034\024\037\046\041\026\043\043\044\027\056" +
    "\032\057\021\061\025\062\040\063\051\071\036\001\002" +
    "\000\040\011\uffae\030\045\032\030\033\020\034\024\037" +
    "\046\041\026\043\043\044\027\056\032\057\021\061\025" +
    "\062\040\063\051\071\036\001\002\000\004\011\u010b\001" +
    "\002\000\044\011\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\056" +
    "\ufff9\057\ufff9\061\ufff9\062\ufff9\063\ufff9\071\ufff9\001\002" +
    "\000\004\034\u010c\001\002\000\004\004\u010d\001\002\000" +
    "\010\064\u0110\065\u0111\071\u010f\001\002\000\004\005\uffad" +
    "\001\002\000\014\005\uffb5\022\u0112\025\u0114\026\u0115\027" +
    "\u0113\001\002\000\004\005\uffb7\001\002\000\004\005\uffb6" +
    "\001\002\000\004\022\u0123\001\002\000\004\022\u0120\001" +
    "\002\000\010\022\u011c\066\u011d\071\u011b\001\002\000\010" +
    "\022\u0117\066\u0118\071\u0116\001\002\000\004\005\uffc1\001" +
    "\002\000\006\066\u011a\071\u0119\001\002\000\004\005\uffc0" +
    "\001\002\000\004\005\uffbd\001\002\000\004\005\uffbc\001" +
    "\002\000\004\005\uffbf\001\002\000\006\066\u011f\071\u011e" +
    "\001\002\000\004\005\uffbe\001\002\000\004\005\uffbb\001" +
    "\002\000\004\005\uffba\001\002\000\006\066\u0122\071\u0121" +
    "\001\002\000\004\005\uffb9\001\002\000\004\005\uffb8\001" +
    "\002\000\006\066\u0125\071\u0124\001\002\000\004\005\uffc3" +
    "\001\002\000\004\005\uffc2\001\002\000\004\005\u0127\001" +
    "\002\000\004\017\u0128\001\002\000\044\011\uffac\030\uffac" +
    "\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\043\uffac\044\uffac\056\uffac\057\uffac\061\uffac\062\uffac" +
    "\063\uffac\071\uffac\001\002\000\004\057\u012b\001\002\000" +
    "\004\005\u0137\001\002\000\004\071\u012c\001\002\000\004" +
    "\022\u012d\001\002\000\004\066\u012e\001\002\000\004\017" +
    "\u012f\001\002\000\004\071\u0130\001\002\000\004\025\u0131" +
    "\001\002\000\004\066\u0132\001\002\000\004\017\u0133\001" +
    "\002\000\004\071\u0134\001\002\000\004\013\u0135\001\002" +
    "\000\004\013\u0136\001\002\000\004\005\uffb2\001\002\000" +
    "\004\010\u0138\001\002\000\036\030\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\037\uffb4\041\uffb4\043\uffb4\044\uffb4\056\uffb4\057" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\071\uffb4\001\002\000\036" +
    "\030\045\032\030\033\020\034\024\037\046\041\026\043" +
    "\043\044\027\056\032\057\021\061\025\062\040\063\051" +
    "\071\036\001\002\000\040\011\u013b\030\045\032\030\033" +
    "\020\034\024\037\046\041\026\043\043\044\027\056\032" +
    "\057\021\061\025\062\040\063\051\071\036\001\002\000" +
    "\044\011\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\056\uffb3\057" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\071\uffb3\001\002\000\006" +
    "\017\u013e\022\u013d\001\002\000\006\064\u013f\065\u0140\001" +
    "\002\000\046\011\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\056\uffe4\057\uffe4\061\uffe4\062\uffe4\063\uffe4\071\uffe4" +
    "\001\002\000\004\017\uffdf\001\002\000\004\017\uffe0\001" +
    "\002\000\004\017\u0142\001\002\000\046\011\uffe5\030\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\043\uffe5\044\uffe5\056\uffe5\057\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\071\uffe5\001\002\000\010\066\060\067" +
    "\057\071\055\001\002\000\004\017\u0145\001\002\000\046" +
    "\011\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\056\uffe1" +
    "\057\uffe1\061\uffe1\062\uffe1\063\uffe1\071\uffe1\001\002\000" +
    "\006\017\u0148\022\u0147\001\002\000\004\070\u0149\001\002" +
    "\000\046\011\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8" +
    "\056\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8\071\uffe8\001" +
    "\002\000\004\017\u014a\001\002\000\046\011\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\043\uffe9\044\uffe9\056\uffe9\057\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\071\uffe9\001\002\000\010\064\u0110\065" +
    "\u0111\071\u010f\001\002\000\004\005\u014d\001\002\000\004" +
    "\010\u014e\001\002\000\036\030\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\037\uffc9\041\uffc9\043\uffc9\044\uffc9\056\uffc9\057\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\071\uffc9\001\002\000\036\030" +
    "\045\032\030\033\020\034\024\037\046\041\026\043\043" +
    "\044\027\056\032\057\021\061\025\062\040\063\051\071" +
    "\036\001\002\000\040\011\u0151\030\045\032\030\033\020" +
    "\034\024\037\046\041\026\043\043\044\027\056\032\057" +
    "\021\061\025\062\040\063\051\071\036\001\002\000\044" +
    "\011\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\056\uffc8\057\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\071\uffc8\001\002\000\004\071" +
    "\u0153\001\002\000\004\005\u0154\001\002\000\004\010\u0155" +
    "\001\002\000\006\036\uffaa\040\uffaa\001\002\000\006\036" +
    "\u015a\040\u0157\001\002\000\004\020\u0161\001\002\000\010" +
    "\011\uffa7\036\uffa7\040\uffa7\001\002\000\010\011\u0160\036" +
    "\u015a\040\u0157\001\002\000\004\066\u015b\001\002\000\004" +
    "\020\uffa6\001\002\000\004\020\u015d\001\002\000\036\030" +
    "\045\032\030\033\020\034\024\037\046\041\026\043\043" +
    "\044\027\056\032\057\021\061\025\062\040\063\051\071" +
    "\036\001\002\000\044\011\uffa5\030\045\032\030\033\020" +
    "\034\024\036\uffa5\037\046\040\uffa5\041\026\043\043\044" +
    "\027\056\032\057\021\061\025\062\040\063\051\071\036" +
    "\001\002\000\010\011\uffa8\036\uffa8\040\uffa8\001\002\000" +
    "\044\011\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\056\uffa9\057" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\071\uffa9\001\002\000\036" +
    "\030\uffa4\032\uffa4\033\uffa4\034\uffa4\037\uffa4\041\uffa4\043" +
    "\uffa4\044\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\071\uffa4\001\002\000\036\030\045\032\030\033\020\034" +
    "\024\037\046\041\026\043\043\044\027\056\032\057\021" +
    "\061\025\062\040\063\051\071\036\001\002\000\044\011" +
    "\uffa3\030\045\032\030\033\020\034\024\036\uffa3\037\046" +
    "\040\uffa3\041\026\043\043\044\027\056\032\057\021\061" +
    "\025\062\040\063\051\071\036\001\002\000\004\042\u0165" +
    "\001\002\000\004\004\u0166\001\002\000\006\070\u0169\071" +
    "\u0167\001\002\000\006\005\uffcb\013\u016e\001\002\000\004" +
    "\005\u016c\001\002\000\006\005\uffca\013\u016a\001\002\000" +
    "\006\070\u0169\071\u0167\001\002\000\004\005\uffcd\001\002" +
    "\000\004\017\u016d\001\002\000\044\011\uffce\030\uffce\032" +
    "\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\056\uffce\057\uffce\061\uffce\062\uffce\063" +
    "\uffce\071\uffce\001\002\000\006\070\u0169\071\u0167\001\002" +
    "\000\004\005\uffcc\001\002\000\006\017\u0172\022\u0171\001" +
    "\002\000\004\012\u0173\001\002\000\046\011\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\043\uffe6\044\uffe6\056\uffe6\057\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\071\uffe6\001\002\000\004\017\u0174\001" +
    "\002\000\046\011\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044" +
    "\uffe7\056\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7\071\uffe7" +
    "\001\002\000\010\064\u0110\065\u0111\071\u010f\001\002\000" +
    "\004\005\u0177\001\002\000\004\010\u0178\001\002\000\036" +
    "\030\uffb1\032\uffb1\033\uffb1\034\uffb1\037\uffb1\041\uffb1\043" +
    "\uffb1\044\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\071\uffb1\001\002\000\036\030\045\032\030\033\020\034" +
    "\024\037\046\041\026\043\043\044\027\056\032\057\021" +
    "\061\025\062\040\063\051\071\036\001\002\000\040\011" +
    "\u017b\030\045\032\030\033\020\034\024\037\046\041\026" +
    "\043\043\044\027\056\032\057\021\061\025\062\040\063" +
    "\051\071\036\001\002\000\044\011\uffb0\030\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\043" +
    "\uffb0\044\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\071\uffb0\001\002\000\004\010\u017d\001\002\000\036\030" +
    "\uffab\032\uffab\033\uffab\034\uffab\037\uffab\041\uffab\043\uffab" +
    "\044\uffab\056\uffab\057\uffab\061\uffab\062\uffab\063\uffab\071" +
    "\uffab\001\002\000\004\011\u017f\001\002\000\004\002\ufffb" +
    "\001\002\000\006\017\u0182\022\u0181\001\002\000\010\066" +
    "\060\067\057\071\055\001\002\000\046\011\uffea\030\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\043\uffea\044\uffea\056\uffea\057\uffea\061\uffea" +
    "\062\uffea\063\uffea\071\uffea\001\002\000\004\017\uffec\001" +
    "\002\000\004\017\u0185\001\002\000\046\011\uffeb\030\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\043\uffeb\044\uffeb\056\uffeb\057\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\071\uffeb\001\002\000\036\030\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\037\uffc7\041\uffc7\043\uffc7\044\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\071\uffc7\001" +
    "\002\000\004\004\u0188\001\002\000\010\064\u0110\065\u0111" +
    "\071\u010f\001\002\000\004\005\u018a\001\002\000\004\010" +
    "\u018b\001\002\000\036\030\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\037\uffc5\041\uffc5\043\uffc5\044\uffc5\056\uffc5\057\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\071\uffc5\001\002\000\036\030\045" +
    "\032\030\033\020\034\024\037\046\041\026\043\043\044" +
    "\027\056\032\057\021\061\025\062\040\063\051\071\036" +
    "\001\002\000\040\011\u018e\030\045\032\030\033\020\034" +
    "\024\037\046\041\026\043\043\044\027\056\032\057\021" +
    "\061\025\062\040\063\051\071\036\001\002\000\044\011" +
    "\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\043\uffc4\044\uffc4\056\uffc4\057\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\071\uffc4\001\002\000\036\030\045" +
    "\032\030\033\020\034\024\037\046\041\026\043\043\044" +
    "\027\056\032\057\021\061\025\062\040\063\051\071\036" +
    "\001\002\000\040\011\u0191\030\045\032\030\033\020\034" +
    "\024\037\046\041\026\043\043\044\027\056\032\057\021" +
    "\061\025\062\040\063\051\071\036\001\002\000\044\011" +
    "\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\043\uffc6\044\uffc6\056\uffc6\057\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\071\uffc6\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\012\001" +
    "\001\000\006\004\015\053\013\001\001\000\034\005\021" +
    "\006\032\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\u0109\017\022" +
    "\020\033\021\034\022\036\023\041\024\046\025\030\034" +
    "\040\036\043\037\016\042\047\054\u017d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\067\001\001\000\004" +
    "\050\066\001\001\000\004\050\065\001\001\000\004\050" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\077\001\001\000" +
    "\004\050\076\001\001\000\004\050\075\001\001\000\004" +
    "\050\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\110\001\001\000\004\050\107\001\001\000\004\050" +
    "\106\001\001\000\004\050\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\123\012\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\156\016\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\237\015\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\260\027\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\273\033" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\321\031\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\362\010\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\u0107\006\032\017\022\020" +
    "\033\021\034\022\036\023\041\024\046\025\030\034\040" +
    "\036\043\037\016\042\047\001\001\000\034\006\u0109\017" +
    "\022\020\033\021\034\022\036\023\041\024\046\025\030" +
    "\034\040\036\043\037\016\042\047\064\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u010d\001\001\000\004\065\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u0138\001\001\000\034\005\u0139\006\032\017\022\020" +
    "\033\021\034\022\036\023\041\024\046\025\030\034\040" +
    "\036\043\037\016\042\047\001\001\000\032\006\u0109\017" +
    "\022\020\033\021\034\022\036\023\041\024\046\025\030" +
    "\034\040\036\043\037\016\042\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u014b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u014e\001\001\000\034\005\u014f\006\032" +
    "\017\022\020\033\021\034\022\036\023\041\024\046\025" +
    "\030\034\040\036\043\037\016\042\047\001\001\000\032" +
    "\006\u0109\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\u0155\001\001\000\006\040\u0158" +
    "\041\u0157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u015e\001\001\000\002\001\001\000\004\067\u015b" +
    "\001\001\000\002\001\001\000\034\005\u015d\006\032\017" +
    "\022\020\033\021\034\022\036\023\041\024\046\025\030" +
    "\034\040\036\043\037\016\042\047\001\001\000\032\006" +
    "\u0109\017\022\020\033\021\034\022\036\023\041\024\046" +
    "\025\030\034\040\036\043\037\016\042\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u0161\001\001" +
    "\000\034\005\u0162\006\032\017\022\020\033\021\034\022" +
    "\036\023\041\024\046\025\030\034\040\036\043\037\016" +
    "\042\047\001\001\000\032\006\u0109\017\022\020\033\021" +
    "\034\022\036\023\041\024\046\025\030\034\040\036\043" +
    "\037\016\042\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u016e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0175\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u0178\001\001\000\034\005\u0179" +
    "\006\032\017\022\020\033\021\034\022\036\023\041\024" +
    "\046\025\030\034\040\036\043\037\016\042\047\001\001" +
    "\000\032\006\u0109\017\022\020\033\021\034\022\036\023" +
    "\041\024\046\025\030\034\040\036\043\037\016\042\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0182\001\001\000\002\001\001\000\004\055" +
    "\u0183\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u018e\001\001\000\002\001\001\000\004\044\u0188\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u018b" +
    "\001\001\000\034\005\u018c\006\032\017\022\020\033\021" +
    "\034\022\036\023\041\024\046\025\030\034\040\036\043" +
    "\037\016\042\047\001\001\000\032\006\u0109\017\022\020" +
    "\033\021\034\022\036\023\041\024\046\025\030\034\040" +
    "\036\043\037\016\042\047\001\001\000\002\001\001\000" +
    "\034\005\u018f\006\032\017\022\020\033\021\034\022\036" +
    "\023\041\024\046\025\030\034\040\036\043\037\016\042" +
    "\047\001\001\000\032\006\u0109\017\022\020\033\021\034" +
    "\022\036\023\041\024\046\025\030\034\040\036\043\037" +
    "\016\042\047\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String out = "";
    public String iteraciones;
    public int switch_contador;
    int C_I = 0;
    public DoublyLinkedList list_json;
    public DoublyLinkedList list_V_G;
    public GraficaBarras grafica_barras;
    public GraficaPie grafica_pie;
    public void implementar_iteracion(){
        iteraciones = "";
        int contador = 0;
        boolean asd = true; 
        while(asd){
            iteraciones = iteraciones + "    ";
            if(contador == C_I){
                break;
            }
            contador = contador + 1;
        }
    }
    public void List_json(DoublyLinkedList _list_json){
        list_json = _list_json;
    }
    public void div_list_V_G(DoublyLinkedList _list_V_G){
        list_V_G = _list_V_G;
    }
    
    public void div_list_Grafica_barras(GraficaBarras _grafica_barras){
        grafica_barras = _grafica_barras;
    }
    public void div_list_Grafica_Pie(GraficaPie _grafica_pie){
        grafica_pie = _grafica_pie;
    }
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= void_main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
out = out + "def main( ):\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // void_main ::= VOID MAIN PAR_IZQ PAR_DER LLAVE_IZQ NT$0 void_main_aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
out = out + "if__name__ = “__main__”:\n"+iteraciones+"main()";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // void_main_aux ::= NT$1 sentencias NT$2 LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		C_I = C_I - 1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_main_aux",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // void_main_aux ::= LLAVE_DER 
            {
              Object RESULT =null;
		out = out + "if__name__ = “__main__”:\n"+"   "+"main()";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_main_aux",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentencia_tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentencia_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= console_write 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_definir_globales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_grafica_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_grafica_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= BRAKE PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out + iteraciones+a+" "+"="+" "+b+"\n";String[] resul = new String[2];resul[0] = a;resul[1]=b;RESULT = resul;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_tipo_dato ::= INT NOMBRE_DATO IGUAL entero_y_signos NT$3 PTCOMA 
            {
              String[] RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_tipo_dato ::= INT NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_tipo_dato ::= STRING NOMBRE_DATO IGUAL DATO_STRING PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_tipo_dato ::= STRING NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_tipo_dato ::= CHAR NOMBRE_DATO IGUAL DATO_CHAR PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_tipo_dato ::= CHAR NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_tipo_dato ::= BOOL NOMBRE_DATO IGUAL True_False PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_tipo_dato ::= BOOL NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_tipo_dato ::= DOUBLE NOMBRE_DATO IGUAL entero_y_signos PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_tipo_dato ::= DOUBLE NOMBRE_DATO PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+"None"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_tipo_dato ::= NOMBRE_DATO IGUAL entero_y_signos PTCOMA 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		out = out + iteraciones+a+" "+"="+" "+b+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_tipo_dato",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // True_False ::= FALSE 
            {
              String RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("True_False",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // True_False ::= TRUE 
            {
              String RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("True_False",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // entero_y_signos_val ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos_val",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // entero_y_signos ::= ENTERO MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"+"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // entero_y_signos ::= ENTERO MENOS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"-"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // entero_y_signos ::= ENTERO POR entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"*"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // entero_y_signos ::= ENTERO DIV entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"/"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // entero_y_signos ::= NOMBRE_DATO MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"+"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // entero_y_signos ::= NOMBRE_DATO MENOS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"-"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // entero_y_signos ::= NOMBRE_DATO POR entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"*"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // entero_y_signos ::= NOMBRE_DATO DIV entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"/"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // entero_y_signos ::= DECIMAL MAS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"+"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // entero_y_signos ::= DECIMAL MENOS entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"-"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // entero_y_signos ::= DECIMAL POR entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"*"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // entero_y_signos ::= DECIMAL DIV entero_y_signos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"/"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // entero_y_signos ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // entero_y_signos ::= NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // entero_y_signos ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero_y_signos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // console_write ::= CONSOLE PUNTO WRITE PAR_IZQ console_write_variables PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		out = out + iteraciones+"print("+a+")\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // console_write_variables ::= DATO_STRING MAS console_write_variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // console_write_variables ::= NOMBRE_DATO MAS console_write_variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // console_write_variables ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // console_write_variables ::= DATO_STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("console_write_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+"if"+" "+a+":"+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_if_else ::= IF PAR_IZQ parametros_if_else PAR_DER LLAVE_IZQ NT$4 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$5 ::= 
            {
              Object RESULT =null;
out = out + iteraciones+"else:"+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_if_else ::= ELSE LLAVE_IZQ NT$5 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+"elif"+" "+a+":"+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_if_else ::= ELSE IF PAR_IZQ parametros_if_else PAR_DER LLAVE_IZQ NT$6 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_if_else ::= NOMBRE_DATO IGUAL IGUAL NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"=="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_if_else ::= NOMBRE_DATO IGUAL IGUAL ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"=="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_if_else ::= NOMBRE_DATO MAYOR NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+">"+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_if_else ::= NOMBRE_DATO MAYOR ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+">"+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_if_else ::= NOMBRE_DATO MENOR NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"<"+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_if_else ::= NOMBRE_DATO MENOR ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"<"+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_if_else ::= NOMBRE_DATO MAYOR IGUAL NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+">="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_if_else ::= NOMBRE_DATO MAYOR IGUAL ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+">="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_if_else ::= NOMBRE_DATO MENOR IGUAL NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"<="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros_if_else ::= NOMBRE_DATO MENOR IGUAL ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"<="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_if_else ::= NOMBRE_DATO DISTINTO IGUAL NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"!="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_if_else ::= NOMBRE_DATO DISTINTO IGUAL ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+"!="+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_if_else ::= TRUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_if_else ::= FALSE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_if_else ::= NOMBRE_DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_if_else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+a+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_for ::= FOR PAR_IZQ sentencia_for_parametros PAR_DER LLAVE_IZQ NT$7 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_for_parametros ::= INT NOMBRE_DATO IGUAL ENTERO PTCOMA NOMBRE_DATO MENOR ENTERO PTCOMA NOMBRE_DATO MAS MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dat = Integer.parseInt(b);dat = dat+1;RESULT = "for "+a+" in "+"range("+dat+","+c+"):";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+"while "+a+":"+"\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_while ::= WHILE PAR_IZQ parametros_if_else PAR_DER LLAVE_IZQ NT$8 sentencias LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones +a+" "+"="+" "+a+" "+"+"+" "+"1\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
out = out + iteraciones+"if("+ x +")"+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_do_while ::= sentencia_do_while_aux_2 NT$9 sentencias NT$10 LLAVE_DER WHILE PAR_IZQ parametros_if_else NT$11 PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		out = out + iteraciones+"    "+"break\n";C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_do_while_aux_2 ::= sentencia_tipo_dato DO LLAVE_IZQ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String _a = a[0];String _b = a[1];out = out + iteraciones+"i = "+_b+"\n"+iteraciones+"while true:"+"\n";RESULT = _a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while_aux_2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
out = out + iteraciones+"def switch(case,precio):\n";C_I = C_I+1;implementar_iteracion();out = out + iteraciones+"switcher = {\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_switch ::= SWITCH PAR_IZQ NOMBRE_DATO PAR_DER LLAVE_IZQ NT$12 sentencias_valores_switch LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencias_valores_switch ::= sentencias_valores_switch sentencia_valores_switch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_switch",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencias_valores_switch ::= sentencia_valores_switch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_switch",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$13 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch_contador = Integer.parseInt(a);out = out + iteraciones+ a +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia_valores_switch ::= CASE ENTERO NT$13 DOSPUT sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		C_I = C_I-1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_valores_switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$14 ::= 
            {
              String RESULT =null;
switch_contador = switch_contador + 1;out = out + iteraciones+ switch_contador +":\n";C_I = C_I+1;implementar_iteracion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia_valores_switch ::= DEFAULT DOSPUT NT$14 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		C_I = C_I-1;implementar_iteracion();C_I = C_I-1;implementar_iteracion();out = out + iteraciones +"}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_valores_switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias_aux ::= sentencias_aux sentencia_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencias_aux ::= sentencia_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia_aux ::= STRING NOMBRE_DATO IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _b = b.replaceAll("\"", "");list_V_G.Insertar_V_G(new V_G(a,_b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia_aux ::= DOUBLE NOMBRE_DATO IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		list_V_G.Insertar_V_G(new V_G(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia_aux ::= DOUBLE NOMBRE_DATO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String _b = b.replaceAll("\"", "");String _c = c.replaceAll("\"", "");String valor_llave = list_json.busqueda_simbols_json_llave(_b,_c);list_V_G.Insertar_V_G(new V_G(a,valor_llave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia_definir_globales ::= VOID DEFINIR_GLOVALES PAR_IZQ PAR_DER LLAVE_IZQ sentencias_aux LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_definir_globales",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencias_graficar ::= sentencias_graficar sentencia_graficar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencias_graficar ::= sentencia_graficar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias_ejex_valores ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias_ejex_valores ::= DATO_STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = a.replaceAll("\"","");grafica_barras.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencias_ejex_valores ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Get_Ejex().Insertar_DatosEjex(new DatosEjex(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencias_ejex_valores ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencias_ejex ::= sentencias_ejex sentencias_ejex_valores 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencias_ejex ::= sentencias_ejex_valores 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencias_valores_datos ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		grafica_barras.Get_valores().Insertar_DatosValores(new DatosValores(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencias_valores_datos ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Get_valores().Insertar_DatosValores(new DatosValores(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencias_valores_datos ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Get_valores().Insertar_DatosValores(new DatosValores(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencias_valores_datos ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencias_valores ::= sentencias_valores sentencias_valores_datos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencias_valores ::= sentencias_valores_datos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_graficar ::= STRING TITULO IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_graficar ::= STRING TITULO IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_barras.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_graficar ::= STRING TITULO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Set_Titulo(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_graficar ::= STRING COR_IZQ COR_DER EJEX IGUAL LLAVE_IZQ sentencias_ejex LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_graficar ::= DOUBLE COR_IZQ COR_DER VALORES IGUAL LLAVE_IZQ sentencias_valores LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_graficar ::= STRING TITULOX IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Set_Titulox(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_graficar ::= STRING TITULOY IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_barras.Set_Tituloy(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_graficar ::= STRING TITULOX IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_barras.Set_Titulox(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_graficar ::= STRING TITULOY IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_barras.Set_Tituloy(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_graficar ::= STRING TITULOX IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Set_Titulox(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_graficar ::= STRING TITULOY IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_barras.Set_Tituloy(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_grafica_barras ::= VOID GRAFICA_BARRAS PAR_IZQ PAR_DER LLAVE_IZQ sentencias_graficar LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica_barras",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_grafica_pie ::= VOID GRAFICA_PIE PAR_IZQ PAR_DER LLAVE_IZQ sentencias_graficar_pie LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica_pie",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencias_graficar_pie ::= sentencias_graficar_pie sentencia_graficar_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar_pie",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencias_graficar_pie ::= sentencia_graficar_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficar_pie",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_graficar_pie ::= STRING TITULO IGUAL NOMBRE_DATO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_pie.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_graficar_pie ::= STRING TITULO IGUAL DATO_STRING PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String _a = a.replaceAll("\"", "");grafica_pie.Set_Titulo(_a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_graficar_pie ::= STRING TITULO IGUAL DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_pie.Set_Titulo(valorllave);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_graficar_pie ::= STRING COR_IZQ COR_DER EJEX IGUAL LLAVE_IZQ sentencias_ejex_pie LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_graficar_pie ::= DOUBLE COR_IZQ COR_DER VALORES IGUAL LLAVE_IZQ sentencias_valores_pie LLAVE_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_graficar_pie",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencias_ejex_valores_pie ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_pie.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencias_ejex_valores_pie ::= DATO_STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = a.replaceAll("\"","");grafica_pie.Get_Ejex().Insertar_DatosEjex(new DatosEjex(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencias_ejex_valores_pie ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_pie.Get_Ejex().Insertar_DatosEjex(new DatosEjex(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencias_ejex_valores_pie ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_valores_pie",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencias_ejex_pie ::= sentencias_ejex_pie sentencias_ejex_valores_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_pie",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencias_ejex_pie ::= sentencias_ejex_valores_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_ejex_pie",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencias_valores_datos_pie ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		grafica_pie.Get_valores().Insertar_DatosValores(new DatosValores(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencias_valores_datos_pie ::= NOMBRE_DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String _a = list_V_G.busqueda_list_V_G(a);grafica_pie.Get_valores().Insertar_DatosValores(new DatosValores(_a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencias_valores_datos_pie ::= DOLLAR LLAVE_IZQ NEWVALOR COMA DATO_STRING COMA DATO_STRING LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String filename = a.replaceAll("\"","");String llave = b.replaceAll("\"","");String valorllave = list_json.busqueda_simbols_json_llave(filename,llave);grafica_pie.Get_valores().Insertar_DatosValores(new DatosValores(valorllave));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencias_valores_datos_pie ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_datos_pie",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencias_valores_pie ::= sentencias_valores_pie sentencias_valores_datos_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_pie",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencias_valores_pie ::= sentencias_valores_datos_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_valores_pie",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
